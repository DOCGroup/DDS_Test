***************************************************************************************
*            README file for RT-DEEP                                                  *
*                                                                                     *
*                                                                                     *
***************************************************************************************

1. Overview
-------------
RT-DEEP is a actor-based C++ framework for runnning applications compliant with
DDS specifications. Current framework supports three actors: source, sink, 
reflector. A source actor is responsible for peridocially sending out publishing data
samples. A sink actor, which usually resides in the same node with a source actor,
is responsible for receiving data from reflectors. A reflector actor, is responsible 
for receiving the data from a source and reflecting the data back to the sink. Latency
measurement can be accomplished easily with current actor settings.




2. Whats inside
----------------

-[DEEP]
  |
  |--[actors]                       - generic actor implementations
  |
  |--[settingsParser]               - XML parsers
  |
  |--[scenarios]                    - scenario settings
  |
  |--[readerWriter]                 - generic reader writer
  |
  |--[vendorAbstraction]            - vendor specific codes
  |
  |--[main]                         - main dcps application
  |
  |--[exec]                         - contains executables for tests
  |
  |--[obj]                          - contains obj files
  |
  |--[doc]                          - related documentations
  |
  |--build_RTI.sh                   - script for building RTI DDS DEEP
  |
  |--build_OpenSplice.sh            - script for building OpenSplice DEEP
  |
  |--DEEP.mpc.OpenSplice
  |
  |--DEEP.mpc.RTI
  |
  |--DEEP.mpc.TAO_DDS
  |
  |--DEEP_framework_export.h



3. Building RT-DEEP
--------------------

- Building RT-DEEP with MPC

  If you are building things for the first time,
  check out the MPC module from the SubVersion repository. It's
  location is

  https://svn.dre.vanaderbilt.edu/DOC/MPC/trunk

  Move the contents of the 'trunk' directory up to the level of
  the 'trunk' directory, and delete it. Set $MPC_ROOT in your
  environment to the path of this new directory.

  To build just the RTI DDS and OpenSplice versions of DEEP,
  there is no dependency on ACE or TAO, and no need to
  have any of those libs built or installed. There are 3
  MPC files in the DEEP directory, one for each of the
  above versions of DEEP and one for the OpenDDS version.
  This latter version depends on ACE + TAO and also
  (because of its lack of support for waitsets) does not
  currently build without errors. You'll notice in the
  file DEEP.mwc that this MPC file is commented out of
  the list. If you want to skip building either one of
  the other versions, you can comment it out as well.

  To build the no-ACE-dependency OpenSplice and RTI DDS
  versions, cd to the DEEP directory and type

  $MPC_ROOT/mwc.pl -type <type> DEEP.mwc

  where <type> is 'make', 'vc71' or 'vc8'. If you have
  uncommented the OpenDDS MPC project and want to
  build it, you'll need to have ACE + TAO installed.
  For this build, type

  $ACE_ROOT/bin/mwc.pl -type <type> DEEP.mwc

  Notice that the ACE_ROOT version of mwc.pl is used
  for this. Of course it goes without saying that, to
  build any of these DEEP versions, you'll need the
  corresponding vendor's implementation of DDS installed,
  and your environment variables set according to the
  instructions in their documentation.

  MPC can work both in windows and linux.

- Building RT-DEEP with scripts under Linux

Below are step-by-step installation instructions to build RT-DEEP.Generally, building RT-DEEP 
is very straightforward, but you have to log on to blade40 as tczar to do it at this point 
because blade40 has all the resources necessary for a successful  build. 


  1) Log in to blade40 as tczzar


  2) Load the environment variables required by RT-DEEP, do

       . /export/home/tczar/.bashrc

  3) Enter the RT-DEEP root, do

       cd $DEEP_HOME

  4) To build RTI DDS DEEP, do 

       sh ./build_OpenSplice.sh

     To build OpenSplice DDS DEEP, do

       sh ./build_RTI.sh


4. Running RT-DEEP
---------------------

Below are step-by-step instructions on how to run manual RT-DEEP tests.



- OpenSplice 1-to-1 latency test on a single node (currently not available: lack of intranodal DW version)

  1) ssh tczar@blade30
  2) . $HOME/.bashrc
  3) cd $DEEP_HOME
  4) cd exec/OpenSplice
  5) sh ./run.sh


- OpenSplice 1-to-n (n >= 1) distributed nodes where "1" must reside on blade30, 
  with "n" distributed on different other nodes

  suppose we want to run latency test for a sequence of size 4, then the scenario4.xml
  will be used as the input to actors.

  - prepare subscriber side
 
    1) ssh to a subscriber node, e.g., ssh tczar@blade31
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/OpenSplice
    5) type "sh ./run_Reflector.sh" on the command but don't execut it, i.e.
       DON't press ENTER!
    6) repeat 1) through 5) for another subscriber node until all subscriber
       nodes are ready

    Note: run_Reflector is using scenario4.xml for all data sizes, because it doesn't
    care about the data sizes, thus the payload property is ignored by run_Reflector


  - prepare publisher side 

    1) ssh tczar@blade30
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/OpenSplice
    5) type "sh ./run_Source_Sink.sh 4" on the command but don't execut it, i.e.
       DON't press ENTER!
   

  - run synchronized 1-to-n latency test

    1) Press Enter for n subscriber nodes (be really fast, :-))
    2) Press Enter for publisher node


- RTI DDS 1-to-1 latency test on a single node

  1) ssh tczar@blade30
  2) . $HOME/.bashrc
  3) cd $DEEP_HOME
  4) cd exec/RTI
  5) sh ./run.sh 
  6) find result file starting with "OneSink" in the same directory


- RTI DDS 1-to-n (n >= 1) distributed nodes where "1" must reside on blade30, 
  with "n" distributed on different other nodes

  suppose we want to run latency test for a sequence of size 4, then the scenario4.xml
  will be used as the input to actors.


  - prepare subscriber side
 
    1) ssh to a subscriber node, e.g., ssh tczar@blade31
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/RTI
    5) type "sh ./run_Reflector.sh" on the command but don't execut it, i.e.
       DON't press ENTER!
    6) repeat 1) through 5) for another subscriber node until all subscriber
       nodes are ready

    Note: run_Reflector is using scenario4.xml for all data sizes, because it doesn't
          care about the data sizes, thus the payload property is ignored by run_Reflector


  - prepare publisher side 

    1) ssh tczar@blade30
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/RTI
    5) type "sh ./run_Source_Sink_1_to_n.sh 4" (replace n with an appropriate #)
       on the command but don't execut it, i.e. DON't press ENTER!
   

  - run synchronized 1-to-n latency test

    1) Press Enter for n subscriber nodes (be really fast, :-))
    2) Press Enter for publisher node


    Note: Be very careful about the NDDS_DISCOVERY_PEERS in the script and make
          sure that the publisher/subscriber (s) are deployed to the correct
          nodes.


5. Multicast issues
-------------------------

Current RT-DEEP is running on multicast address at 225.3.2.1

For OpenSplice, you might need to manually set up the routing table in order
to let the network traffic properly go through multicast address to do that, 
you should use route.sh under the /exec/OpenSplice directory to explicitely
register the multicast membership group,e.g.

./route.sh eth0 (eth0 indicates whatever interface that represents the current 
active network interface)

to monitor the traffic for diagnosis purpose, you may run sniffer program such 
as tcpdump to monitor the network traffic (suppose you are running 1-to-many 
internodes scenarios)

e.g. 

sudo /usr/sbin/tcpdump host 225.3.2.1