1. Overview
-------------
RT-DEEP is a actor-based C++ framework for runnning applications compliant with
DDS specifications. Current framework supports three actors: source, sink, 
reflector. A source actor is responsible for peridocially sending out publishing data
samples. A sink actor, which usually resides in the same node with a source actor,
is responsible for receiving data from reflectors. A reflector actor, is responsible 
for receiving the data from a source and reflecting the data back to the sink. Latency
measurement can be accomplished easily with current actor settings.




2. Structures
--------------

-[DEEP]
  |
  |--[actors]                       generic actor implementations
  |
  |--[settingsParser]               XML parsers
  |
  |--[scenarios]                    scenario settings
  |
  |--[readerWriter]                 generic reader writer
  |
  |--[vendorAbstraction]            vendor specific codes
  |
  |--[main]                         main dcps application
  |
  |--[exec]                         contains executables for tests
  |
  |--[obj]                          contains obj files
  |
  |--[doc]                          related documentations
  |
  |--build_RTI.sh                 script for building RTI DDS DEEP
  |
  |--build_OpenSplice.sh          script for building OpenSplice DEEP
  |
  |--DEEP.mpc.OpenSplice
  |
  |--DEEP.mpc.RTI
  |
  |--DEEP.mpc.TAO_DDS
  |
  |--DEEP_framework_export.h



3. Building RT-DEEP
-------------------

- Building RT-DEEP on Linux

   Building RT-DEEP is very straightforward, but you have to log on to blade40 as tczar
   to do it at this point because blade40 has all the resources necessary for a successful
   build. 

   For RTI DDS DEEP

   $./build_OpenSplice.sh


   For OpenSplice DDS DEEP

   $./build_RTI.sh


- Building RT-DEEP on Windows


  Jeff, can you fill out this section?

4. Running RT-DEEP
---------------------

.OpenSplice 1-to-1 on a single node where the 2 usually reside on blade30/blade31 usually
 -ssh to any blade on the network, say blade30
 -make sure $DEEP_HOME exists
 -cd $DEEP_HOME
 -cd exec/OpenSplice
 -sh ./run.sh


.OpenSplice 1-to-n (n >= 1) distributed nodes where 1 usually on blade30, and n distributed on different other blade  nodes

- subscriber side 
 -ssh to any blade on the network, say blade30
 -make sure $DEEP_HOME exists
 -cd $DEEP_HOME
 -cd exec/OpenSplice
 -sh ./run_Reflector.sh

- publisher side 
 -ssh to any blade on the network, say blade30
 -make sure $DEEP_HOME exists
 -cd $DEEP_HOME
 -cd exec/OpenSplice
 -sh ./run_Source_Sink.sh


