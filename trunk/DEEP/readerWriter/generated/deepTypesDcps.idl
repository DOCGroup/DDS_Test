#ifndef DEEPTYPESDCPS_IDL_
#define DEEPTYPESDCPS_IDL_

#include "dds_dcps.idl"
#include "deepTypes.idl"

module deepTypes {

    typedef sequence<simpleType> simpleTypeSeq;
    
    local interface simpleTypeTypeSupportInterface : DDS::TypeSupport {
        DDS::ReturnCode_t register_type(
    		in DDS::DomainParticipant participant,
    		in string type_name);
    
        string get_type_name();
    };
    
    local interface simpleTypeDataWriter : DDS::DataWriter {
        DDS::InstanceHandle_t register_instance(
    		in simpleType instance_data);
    
        DDS::InstanceHandle_t register_instance_w_timestamp(
    		in simpleType instance_data,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t unregister_instance(
    		in simpleType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t unregister_instance_w_timestamp(
    		in simpleType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t write(
    		in simpleType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t write_w_timestamp(
    		in simpleType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t dispose(
    		in simpleType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t dispose_w_timestamp(
    		in simpleType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t get_key_value(
    		inout simpleType key_holder,
    		in DDS::InstanceHandle_t handle);
    };
    
    local interface simpleTypeDataReader : DDS::DataReader {
        DDS::ReturnCode_t read(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_w_condition(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_w_condition(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t read_next_sample(
    		inout simpleType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t take_next_sample(
    		inout simpleType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t read_instance(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_instance(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_next_instance(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance_w_condition(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_next_instance_w_condition(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t return_loan(
    		inout simpleTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq);
    
        DDS::ReturnCode_t get_key_value(
    		inout simpleType key_holder,
    		in DDS::InstanceHandle_t handle);
    
        DDS::InstanceHandle_t lookup_instance(
    		in simpleType instance);
    };
    typedef sequence<nestedType> nestedTypeSeq;
    
    local interface nestedTypeTypeSupportInterface : DDS::TypeSupport {
        DDS::ReturnCode_t register_type(
    		in DDS::DomainParticipant participant,
    		in string type_name);
    
        string get_type_name();
    };
    
    local interface nestedTypeDataWriter : DDS::DataWriter {
        DDS::InstanceHandle_t register_instance(
    		in nestedType instance_data);
    
        DDS::InstanceHandle_t register_instance_w_timestamp(
    		in nestedType instance_data,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t unregister_instance(
    		in nestedType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t unregister_instance_w_timestamp(
    		in nestedType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t write(
    		in nestedType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t write_w_timestamp(
    		in nestedType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t dispose(
    		in nestedType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t dispose_w_timestamp(
    		in nestedType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t get_key_value(
    		inout nestedType key_holder,
    		in DDS::InstanceHandle_t handle);
    };
    
    local interface nestedTypeDataReader : DDS::DataReader {
        DDS::ReturnCode_t read(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_w_condition(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_w_condition(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t read_next_sample(
    		inout nestedType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t take_next_sample(
    		inout nestedType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t read_instance(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_instance(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_next_instance(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance_w_condition(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_next_instance_w_condition(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t return_loan(
    		inout nestedTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq);
    
        DDS::ReturnCode_t get_key_value(
    		inout nestedType key_holder,
    		in DDS::InstanceHandle_t handle);
    
        DDS::InstanceHandle_t lookup_instance(
    		in nestedType instance);
    };
    typedef sequence<arrayType> arrayTypeSeq;
    
    local interface arrayTypeTypeSupportInterface : DDS::TypeSupport {
        DDS::ReturnCode_t register_type(
    		in DDS::DomainParticipant participant,
    		in string type_name);
    
        string get_type_name();
    };
    
    local interface arrayTypeDataWriter : DDS::DataWriter {
        DDS::InstanceHandle_t register_instance(
    		in arrayType instance_data);
    
        DDS::InstanceHandle_t register_instance_w_timestamp(
    		in arrayType instance_data,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t unregister_instance(
    		in arrayType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t unregister_instance_w_timestamp(
    		in arrayType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t write(
    		in arrayType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t write_w_timestamp(
    		in arrayType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t dispose(
    		in arrayType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t dispose_w_timestamp(
    		in arrayType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t get_key_value(
    		inout arrayType key_holder,
    		in DDS::InstanceHandle_t handle);
    };
    
    local interface arrayTypeDataReader : DDS::DataReader {
        DDS::ReturnCode_t read(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_w_condition(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_w_condition(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t read_next_sample(
    		inout arrayType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t take_next_sample(
    		inout arrayType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t read_instance(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_instance(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_next_instance(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance_w_condition(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_next_instance_w_condition(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t return_loan(
    		inout arrayTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq);
    
        DDS::ReturnCode_t get_key_value(
    		inout arrayType key_holder,
    		in DDS::InstanceHandle_t handle);
    
        DDS::InstanceHandle_t lookup_instance(
    		in arrayType instance);
    };
    typedef sequence<stringType> stringTypeSeq;
    
    local interface stringTypeTypeSupportInterface : DDS::TypeSupport {
        DDS::ReturnCode_t register_type(
    		in DDS::DomainParticipant participant,
    		in string type_name);
    
        string get_type_name();
    };
    
    local interface stringTypeDataWriter : DDS::DataWriter {
        DDS::InstanceHandle_t register_instance(
    		in stringType instance_data);
    
        DDS::InstanceHandle_t register_instance_w_timestamp(
    		in stringType instance_data,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t unregister_instance(
    		in stringType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t unregister_instance_w_timestamp(
    		in stringType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t write(
    		in stringType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t write_w_timestamp(
    		in stringType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t dispose(
    		in stringType instance_data,
    		in DDS::InstanceHandle_t handle);
    
        DDS::ReturnCode_t dispose_w_timestamp(
    		in stringType instance_data,
    		in DDS::InstanceHandle_t handle,
    		in DDS::Time_t source_timestamp);
    
        DDS::ReturnCode_t get_key_value(
    		inout stringType key_holder,
    		in DDS::InstanceHandle_t handle);
    };
    
    local interface stringTypeDataReader : DDS::DataReader {
        DDS::ReturnCode_t read(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_w_condition(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_w_condition(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t read_next_sample(
    		inout stringType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t take_next_sample(
    		inout stringType received_data,
    		inout DDS::SampleInfo sample_info);
    
        DDS::ReturnCode_t read_instance(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_instance(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t take_next_instance(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::SampleStateMask sample_states,
    		in DDS::ViewStateMask view_states,
    		in DDS::InstanceStateMask instance_states);
    
        DDS::ReturnCode_t read_next_instance_w_condition(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t take_next_instance_w_condition(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq,
    		in long max_samples,
    		in DDS::InstanceHandle_t a_handle,
    		in DDS::ReadCondition a_condition);
    
        DDS::ReturnCode_t return_loan(
    		inout stringTypeSeq received_data,
    		inout DDS::SampleInfoSeq info_seq);
    
        DDS::ReturnCode_t get_key_value(
    		inout stringType key_holder,
    		in DDS::InstanceHandle_t handle);
    
        DDS::InstanceHandle_t lookup_instance(
    		in stringType instance);
    };
};

#endif
