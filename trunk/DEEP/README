//$id:
***************************************************************************************
*            README file for RT-DEEP                                                  *
*                                                                                     *
*                                                                                     *
***************************************************************************************

1. Overview
-------------
RT-DEEP is a actor-based C++ framework for runnning applications compliant with
DDS specifications. Current framework supports three actors: source, sink, 
reflector. A source actor is responsible for peridocially sending out publishing data
samples. A sink actor, which usually resides in the same node with a source actor,
is responsible for receiving data from reflectors. A reflector actor, is responsible 
for receiving the data from a source and reflecting the data back to the sink. Latency
measurement can be accomplished easily with current actor settings.




2. Whats inside
----------------

-[DEEP]
  |
  |--[actors]                       - generic actor implementations
  |
  |--[settingsParser]               - XML parsers
  |
  |--[scenarios]                    - scenario settings
  |
  |--[readerWriter]                 - generic reader writer
  |
  |--[vendorAbstraction]            - vendor specific codes
  |
  |--[main]                         - main dcps application
  |
  |--[exec]                         - contains executables for tests
  |
  |--[obj]                          - contains obj files
  |
  |--[doc]                          - related documentations
  |
  |--build_RTI.sh                   - script for building RTI DDS DEEP
  |
  |--build_OpenSplice.sh            - script for building OpenSplice DEEP
  |
  |--DEEP.mpc.OpenSplice
  |
  |--DEEP.mpc.RTI
  |
  |--DEEP.mpc.TAO_DDS
  |
  |--DEEP_framework_export.h



3. Building RT-DEEP
--------------------

- Building RT-DEEP on Linux

Below are step-by-step installation instructions to build RT-DEEP.Generally, building RT-DEEP 
is very straightforward, but you have to log on to blade40 as tczar to do it at this point 
because blade40 has all the resources necessary for a successful  build. 


  1) Log in to blade40 as tczzar


  2) Load the environment variables required by RT-DEEP, do

       . /export/home/tczar/.bashrc

  3) Enter the RT-DEEP root, do

       cd $DEEP_HOME

  4) To build RTI DDS DEEP, do 

       sh ./build_OpenSplice.sh

     To build OpenSplice DDS DEEP, do

       sh ./build_RTI.sh


- Building RT-DEEP on Windows


  (Jeff, can you fill out this section when you have a chance to test the installation under windows?)


4. Running RT-DEEP
---------------------

Below are step-by-step instructions on how to run manual RT-DEEP tests.



- OpenSplice 1-to-1 latency test on a single node (currently not available: lack of intranodal DW version)

  1) ssh tczar@blade30
  2) . $HOME/.bashrc
  3) cd $DEEP_HOME
  4) cd exec/OpenSplice
  5) sh ./run.sh


- OpenSplice 1-to-n (n >= 1) distributed nodes where "1" must reside on blade30, 
  with "n" distributed on different other nodes

  suppose we want to run latency test for a sequence of size 4, then the scenario4.xml
  will be used as the input to actors.

  - prepare subscriber side
 
    1) ssh to a subscriber node, e.g., ssh tczar@blade31
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/OpenSplice
    5) type "sh ./run_Reflector.sh" on the command but don't execut it, i.e.
       DON't press ENTER!
    6) repeat 1) through 5) for another subscriber node until all subscriber
       nodes are ready

    Note: run_Reflector is using scenario4.xml for all data sizes, because it doesn't
    care about the data sizes, thus the payload property is ignored by run_Reflector


  - prepare publisher side 

    1) ssh tczar@blade30
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/OpenSplice
    5) type "sh ./run_Source_Sink.sh 4" on the command but don't execut it, i.e.
       DON't press ENTER!
   

  - run synchronized 1-to-n latency test

    1) Press Enter for n subscriber nodes (be really fast, :-))
    2) Press Enter for publisher node


- RTI DDS 1-to-1 latency test on a single node

  1) ssh tczar@blade30
  2) . $HOME/.bashrc
  3) cd $DEEP_HOME
  4) cd exec/RTI
  5) sh ./run.sh 


- RTI DDS 1-to-n (n >= 1) distributed nodes where "1" must reside on blade30, 
  with "n" distributed on different other nodes

  suppose we want to run latency test for a sequence of size 4, then the scenario4.xml
  will be used as the input to actors.


  - prepare subscriber side
 
    1) ssh to a subscriber node, e.g., ssh tczar@blade31
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/RTI
    5) type "sh ./run_Reflector.sh" on the command but don't execut it, i.e.
       DON't press ENTER!
    6) repeat 1) through 5) for another subscriber node until all subscriber
       nodes are ready

    Note: run_Reflector is using scenario4.xml for all data sizes, because it doesn't
          care about the data sizes, thus the payload property is ignored by run_Reflector


  - prepare publisher side 

    1) ssh tczar@blade30
    2) . $HOME/.bashrc
    3) cd $DEEP_HOME
    4) cd exec/RTI
    5) type "sh ./run_Source_Sink_1_to_n.sh 4" (replace n with an appropriate #)
       on the command but don't execut it, i.e. DON't press ENTER!
   

  - run synchronized 1-to-n latency test

    1) Press Enter for n subscriber nodes (be really fast, :-))
    2) Press Enter for publisher node


    Note: Be very careful about the NDDS_DISCOVERY_PEERS in the script and make
          sure that the publisher/subscriber (s) are deployed to the correct
          nodes.