// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:292


#include "PubComplexMessageTypeSupportC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "PubComplexMessageTypeSupportC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:888

#if !defined (_DDS_TIME_T__ARG_TRAITS_)
#define _DDS_TIME_T__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDS::Time_t>
    : public
        Fixed_Size_Arg_Traits_T<
            DDS::Time_t,
            TAO::Any_Insert_Policy_Noop <DDS::Time_t>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:888

#if !defined (_DDS_SAMPLEINFO__ARG_TRAITS_)
#define _DDS_SAMPLEINFO__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDS::SampleInfo>
    : public
        Fixed_Size_Arg_Traits_T<
            DDS::SampleInfo,
            TAO::Any_Insert_Policy_Noop <DDS::SampleInfo>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:590

#if !defined (_DDS_SAMPLEINFOSEQ__ARG_TRAITS_)
#define _DDS_SAMPLEINFOSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDS::SampleInfoSeq>
    : public
        Var_Size_Arg_Traits_T<
            DDS::SampleInfoSeq,
            DDS::SampleInfoSeq_var,
            DDS::SampleInfoSeq_out,
            TAO::Any_Insert_Policy_Noop <DDS::SampleInfoSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:118

#if !defined (_DDS_DOMAINPARTICIPANT__ARG_TRAITS_)
#define _DDS_DOMAINPARTICIPANT__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<DDS::DomainParticipant>
    : public
        Object_Arg_Traits_T<
            DDS::DomainParticipant_ptr,
            DDS::DomainParticipant_var,
            DDS::DomainParticipant_out,
            TAO::Objref_Traits<DDS::DomainParticipant>,
            TAO::Any_Insert_Policy_Noop <DDS::DomainParticipant_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:888

#if !defined (_DDSPERFTEST_PUBCOMPLEXMESSAGE__ARG_TRAITS_)
#define _DDSPERFTEST_PUBCOMPLEXMESSAGE__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDSPerfTest::PubComplexMessage>
    : public
        Var_Size_Arg_Traits_T<
            DDSPerfTest::PubComplexMessage,
            DDSPerfTest::PubComplexMessage_var,
            DDSPerfTest::PubComplexMessage_out,
            TAO::Any_Insert_Policy_Noop <DDSPerfTest::PubComplexMessage>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:590

#if !defined (_PUBCOMPLEXMESSAGESEQ__ARG_TRAITS_)
#define _PUBCOMPLEXMESSAGESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<PubComplexMessageSeq>
    : public
        Var_Size_Arg_Traits_T<
            PubComplexMessageSeq,
            PubComplexMessageSeq_var,
            PubComplexMessageSeq_out,
            TAO::Any_Insert_Policy_Noop <PubComplexMessageSeq>
          >
  {
  };

#endif /* end #if !defined */
}


// TAO_IDL - Generated from 
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PUBCOMPLEXMESSAGESEQ_CS_)
#define _PUBCOMPLEXMESSAGESEQ_CS_

PubComplexMessageSeq::PubComplexMessageSeq (void)
{}

PubComplexMessageSeq::PubComplexMessageSeq (
    ::CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        DDSPerfTest::PubComplexMessage
      >
    (max)
{}

PubComplexMessageSeq::PubComplexMessageSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    DDSPerfTest::PubComplexMessage * buffer,
    ::CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        DDSPerfTest::PubComplexMessage
      >
    (max, length, buffer, release)
{}

PubComplexMessageSeq::PubComplexMessageSeq (
    const PubComplexMessageSeq &seq
  )
  : TAO_Unbounded_Sequence<
        DDSPerfTest::PubComplexMessage
      >
    (seq)
{}

PubComplexMessageSeq::~PubComplexMessageSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PubComplexMessageTypeSupport.

PubComplexMessageTypeSupport_ptr
TAO::Objref_Traits<PubComplexMessageTypeSupport>::duplicate (
    PubComplexMessageTypeSupport_ptr p
  )
{
  return PubComplexMessageTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<PubComplexMessageTypeSupport>::release (
    PubComplexMessageTypeSupport_ptr p
  )
{
  CORBA::release (p);
}

PubComplexMessageTypeSupport_ptr
TAO::Objref_Traits<PubComplexMessageTypeSupport>::nil (void)
{
  return PubComplexMessageTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<PubComplexMessageTypeSupport>::marshal (
    const PubComplexMessageTypeSupport_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageTypeSupport::register_type (
    ::DDS::DomainParticipant_ptr participant,
    const char * type_name
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageTypeSupport_Proxy_Broker_ == 0)
    {
      PubComplexMessageTypeSupport_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDS::DomainParticipant>::in_arg_val _tao_participant (participant);
  TAO::Arg_Traits< ::CORBA::Char *>::in_arg_val _tao_type_name (type_name);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_participant,
      &_tao_type_name
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "register_type",
      13,
      this->the_TAO_PubComplexMessageTypeSupport_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

PubComplexMessageTypeSupport::PubComplexMessageTypeSupport (void)
 : the_TAO_PubComplexMessageTypeSupport_Proxy_Broker_ (0)
{
  this->PubComplexMessageTypeSupport_setup_collocation ();
}

void
PubComplexMessageTypeSupport::PubComplexMessageTypeSupport_setup_collocation ()
{
  if (::_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PubComplexMessageTypeSupport_Proxy_Broker_ =
        ::_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->TAO_DCPS_TypeSupport_setup_collocation ();
}

PubComplexMessageTypeSupport::~PubComplexMessageTypeSupport (void)
{}

PubComplexMessageTypeSupport_ptr
PubComplexMessageTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PubComplexMessageTypeSupport>::narrow (
        _tao_objref,
        "IDL:PubComplexMessageTypeSupport:1.0",
        _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

PubComplexMessageTypeSupport_ptr
PubComplexMessageTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PubComplexMessageTypeSupport>::unchecked_narrow (
        _tao_objref,
        "IDL:PubComplexMessageTypeSupport:1.0",
        _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

PubComplexMessageTypeSupport_ptr
PubComplexMessageTypeSupport::_duplicate (PubComplexMessageTypeSupport_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
PubComplexMessageTypeSupport::_tao_release (PubComplexMessageTypeSupport_ptr obj)
{
  CORBA::release (obj);
}

::CORBA::Boolean
PubComplexMessageTypeSupport::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:TAO/DCPS/TypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:PubComplexMessageTypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS ( ::CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* PubComplexMessageTypeSupport::_interface_repository_id (void) const
{
  return "IDL:PubComplexMessageTypeSupport:1.0";
}

::CORBA::Boolean
PubComplexMessageTypeSupport::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PubComplexMessageDataWriter.

PubComplexMessageDataWriter_ptr
TAO::Objref_Traits<PubComplexMessageDataWriter>::duplicate (
    PubComplexMessageDataWriter_ptr p
  )
{
  return PubComplexMessageDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<PubComplexMessageDataWriter>::release (
    PubComplexMessageDataWriter_ptr p
  )
{
  CORBA::release (p);
}

PubComplexMessageDataWriter_ptr
TAO::Objref_Traits<PubComplexMessageDataWriter>::nil (void)
{
  return PubComplexMessageDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<PubComplexMessageDataWriter>::marshal (
    const PubComplexMessageDataWriter_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::InstanceHandle_t PubComplexMessageDataWriter::_cxx_register (
    const ::DDSPerfTest::PubComplexMessage & instance_data
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "register",
      8,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::InstanceHandle_t PubComplexMessageDataWriter::register_w_timestamp (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t handle,
    const ::DDS::Time_t & source_timestamp
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  TAO::Arg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp (source_timestamp);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_handle,
      &_tao_source_timestamp
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "register_w_timestamp",
      20,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::unregister (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t handle
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_handle
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "unregister",
      10,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::unregister_w_timestamp (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t handle,
    const ::DDS::Time_t & source_timestamp
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  TAO::Arg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp (source_timestamp);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_handle,
      &_tao_source_timestamp
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "unregister_w_timestamp",
      22,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::write (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t handle
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_handle
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "write",
      5,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::write_w_timestamp (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t handle,
    const ::DDS::Time_t & source_timestamp
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  TAO::Arg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp (source_timestamp);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_handle,
      &_tao_source_timestamp
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "write_w_timestamp",
      17,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::dispose (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t instance_handle
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_instance_handle (instance_handle);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_instance_handle
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "dispose",
      7,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::dispose_w_timestamp (
    const ::DDSPerfTest::PubComplexMessage & instance_data,
    ::DDS::InstanceHandle_t instance_handle,
    const ::DDS::Time_t & source_timestamp
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data (instance_data);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_instance_handle (instance_handle);
  TAO::Arg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp (source_timestamp);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_instance_data,
      &_tao_instance_handle,
      &_tao_source_timestamp
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "dispose_w_timestamp",
      19,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataWriter::get_key_value (
    ::DDSPerfTest::PubComplexMessage & key_holder,
    ::DDS::InstanceHandle_t handle
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataWriter_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_key_holder (key_holder);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key_holder,
      &_tao_handle
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_key_value",
      13,
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

PubComplexMessageDataWriter::PubComplexMessageDataWriter (void)
 : the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ (0)
{
  this->PubComplexMessageDataWriter_setup_collocation ();
}

void
PubComplexMessageDataWriter::PubComplexMessageDataWriter_setup_collocation ()
{
  if (::_TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PubComplexMessageDataWriter_Proxy_Broker_ =
        ::_TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->TAO_DCPS_DataWriterRemote_setup_collocation ();
}

PubComplexMessageDataWriter::~PubComplexMessageDataWriter (void)
{}

PubComplexMessageDataWriter_ptr
PubComplexMessageDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PubComplexMessageDataWriter>::narrow (
        _tao_objref,
        "IDL:PubComplexMessageDataWriter:1.0",
        _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

PubComplexMessageDataWriter_ptr
PubComplexMessageDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PubComplexMessageDataWriter>::unchecked_narrow (
        _tao_objref,
        "IDL:PubComplexMessageDataWriter:1.0",
        _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

PubComplexMessageDataWriter_ptr
PubComplexMessageDataWriter::_duplicate (PubComplexMessageDataWriter_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
PubComplexMessageDataWriter::_tao_release (PubComplexMessageDataWriter_ptr obj)
{
  CORBA::release (obj);
}

::CORBA::Boolean
PubComplexMessageDataWriter::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:TAO/DCPS/DataWriterRemote:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:PubComplexMessageDataWriter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS ( ::CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* PubComplexMessageDataWriter::_interface_repository_id (void) const
{
  return "IDL:PubComplexMessageDataWriter:1.0";
}

::CORBA::Boolean
PubComplexMessageDataWriter::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for PubComplexMessageDataReader.

PubComplexMessageDataReader_ptr
TAO::Objref_Traits<PubComplexMessageDataReader>::duplicate (
    PubComplexMessageDataReader_ptr p
  )
{
  return PubComplexMessageDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<PubComplexMessageDataReader>::release (
    PubComplexMessageDataReader_ptr p
  )
{
  CORBA::release (p);
}

PubComplexMessageDataReader_ptr
TAO::Objref_Traits<PubComplexMessageDataReader>::nil (void)
{
  return PubComplexMessageDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<PubComplexMessageDataReader>::marshal (
    const PubComplexMessageDataReader_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::read (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples (max_samples);
  TAO::Arg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states (sample_states);
  TAO::Arg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states (view_states);
  TAO::Arg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states (instance_states);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      7,
      "read",
      4,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::take (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples (max_samples);
  TAO::Arg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states (sample_states);
  TAO::Arg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states (view_states);
  TAO::Arg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states (instance_states);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      7,
      "take",
      4,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::read_next_sample (
    ::DDSPerfTest::PubComplexMessage & received_data,
    ::DDS::SampleInfo & sample_info
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfo>::inout_arg_val _tao_sample_info (sample_info);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_sample_info
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "read_next_sample",
      16,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::take_next_sample (
    ::DDSPerfTest::PubComplexMessage & received_data,
    ::DDS::SampleInfo & sample_info
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfo>::inout_arg_val _tao_sample_info (sample_info);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_sample_info
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "take_next_sample",
      16,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::read_instance (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples (max_samples);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle (a_handle);
  TAO::Arg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states (sample_states);
  TAO::Arg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states (view_states);
  TAO::Arg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states (instance_states);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "read_instance",
      13,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::take_instance (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples (max_samples);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle (a_handle);
  TAO::Arg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states (sample_states);
  TAO::Arg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states (view_states);
  TAO::Arg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states (instance_states);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "take_instance",
      13,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::read_next_instance (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples (max_samples);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle (a_handle);
  TAO::Arg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states (sample_states);
  TAO::Arg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states (view_states);
  TAO::Arg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states (instance_states);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "read_next_instance",
      18,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::take_next_instance (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq,
    ::CORBA::Long max_samples,
    ::DDS::InstanceHandle_t a_handle,
    ::DDS::SampleStateMask sample_states,
    ::DDS::ViewStateMask view_states,
    ::DDS::InstanceStateMask instance_states
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples (max_samples);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle (a_handle);
  TAO::Arg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states (sample_states);
  TAO::Arg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states (view_states);
  TAO::Arg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states (instance_states);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "take_next_instance",
      18,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::return_loan (
    ::PubComplexMessageSeq & received_data,
    ::DDS::SampleInfoSeq & info_seq
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data (received_data);
  TAO::Arg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq (info_seq);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_received_data,
      &_tao_info_seq
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "return_loan",
      11,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::DDS::ReturnCode_t PubComplexMessageDataReader::get_key_value (
    ::DDSPerfTest::PubComplexMessage & key_holder,
    ::DDS::InstanceHandle_t handle
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS ( ::CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ == 0)
    {
      PubComplexMessageDataReader_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::DDS::ReturnCode_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_key_holder (key_holder);
  TAO::Arg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle (handle);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_key_holder,
      &_tao_handle
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_key_value",
      13,
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK_RETURN (_tao_retval.excp ());
  
  return _tao_retval.retn ();
}

PubComplexMessageDataReader::PubComplexMessageDataReader (void)
 : the_TAO_PubComplexMessageDataReader_Proxy_Broker_ (0)
{
  this->PubComplexMessageDataReader_setup_collocation ();
}

void
PubComplexMessageDataReader::PubComplexMessageDataReader_setup_collocation ()
{
  if (::_TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PubComplexMessageDataReader_Proxy_Broker_ =
        ::_TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->TAO_DCPS_DataReaderRemote_setup_collocation ();
}

PubComplexMessageDataReader::~PubComplexMessageDataReader (void)
{}

PubComplexMessageDataReader_ptr
PubComplexMessageDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PubComplexMessageDataReader>::narrow (
        _tao_objref,
        "IDL:PubComplexMessageDataReader:1.0",
        _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

PubComplexMessageDataReader_ptr
PubComplexMessageDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<PubComplexMessageDataReader>::unchecked_narrow (
        _tao_objref,
        "IDL:PubComplexMessageDataReader:1.0",
        _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

PubComplexMessageDataReader_ptr
PubComplexMessageDataReader::_duplicate (PubComplexMessageDataReader_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
PubComplexMessageDataReader::_tao_release (PubComplexMessageDataReader_ptr obj)
{
  CORBA::release (obj);
}

::CORBA::Boolean
PubComplexMessageDataReader::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:TAO/DCPS/DataReaderRemote:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:PubComplexMessageDataReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS ( ::CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* PubComplexMessageDataReader::_interface_repository_id (void) const
{
  return "IDL:PubComplexMessageDataReader:1.0";
}

::CORBA::Boolean
PubComplexMessageDataReader::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_PubComplexMessageSeq_CPP_
#define _TAO_CDR_OP_PubComplexMessageSeq_CPP_

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PubComplexMessageSeq &_tao_sequence
  )
{
  const ::CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      ::CORBA::Boolean _tao_marshal_flag = true;
      
      for ( ::CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return false;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PubComplexMessageSeq &_tao_sequence
  )
{
  ::CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      ::CORBA::Boolean _tao_marshal_flag = true;
      
      for ( ::CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_PubComplexMessageSeq_CPP_ */

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PubComplexMessageTypeSupport_ptr _tao_objref
  )
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PubComplexMessageTypeSupport_ptr &_tao_objref
  )
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::PubComplexMessageTypeSupport RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PubComplexMessageDataWriter_ptr _tao_objref
  )
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PubComplexMessageDataWriter_ptr &_tao_objref
  )
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::PubComplexMessageDataWriter RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PubComplexMessageDataReader_ptr _tao_objref
  )
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PubComplexMessageDataReader_ptr &_tao_objref
  )
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::PubComplexMessageDataReader RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}

// TAO_IDL - Generated from
// w:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/serializer_op_cs.cpp:96

#if !defined _TAO_SERIALIZER_OP_PubComplexMessageSeq_CPP_
#define _TAO_SERIALIZER_OP_PubComplexMessageSeq_CPP_

::CORBA::Boolean _tao_is_bounded_size (
    const PubComplexMessageSeq &_tao_sequence
  )
{
  ACE_UNUSED_ARG(_tao_sequence);
  return false; /* unbounded sequence */
}

size_t _dcps_max_marshaled_size (
    const PubComplexMessageSeq &_tao_sequence
  )
{
  DDSPerfTest::PubComplexMessage a_base_value;
  return _dcps_max_marshaled_size_ulong () + 
    _tao_sequence.maximum() * 
    _dcps_max_marshaled_size (a_base_value);
}

size_t _dcps_find_size (
    const PubComplexMessageSeq &_tao_sequence
  )
{
  //iterate over the sequence to find the current size
  size_t the_length = _dcps_max_marshaled_size_ulong ();
  for ( ::CORBA::ULong i = 0; i < _tao_sequence.length(); ++i)
    {
      the_length += _dcps_find_size (_tao_sequence[i]);
    }
  return the_length;
}

::CORBA::Boolean operator<< (
    TAO::DCPS::Serializer &strm,
    const PubComplexMessageSeq &_tao_sequence
  )
{
  const ::CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      ::CORBA::Boolean _tao_marshal_flag = 1;
      
      for ( ::CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm << _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    }
  
  return 0;
}

::CORBA::Boolean operator>> (
    TAO::DCPS::Serializer &strm,
    PubComplexMessageSeq &_tao_sequence
  )
{
  ::CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return 1;
        }
      
      // Retrieve all the elements.
      ::CORBA::Boolean _tao_marshal_flag = 1;
      
      for ( ::CORBA::ULong i = 0; i < _tao_seq_len && _tao_marshal_flag; ++i)
        {
          _tao_marshal_flag = (strm >> _tao_sequence[i]);
        }
      
      return _tao_marshal_flag;
    
    }
  
  return 0;
}

#endif /* _TAO_SERIALIZER_OP_PubComplexMessageSeq_CPP_ */


TAO_END_VERSIONED_NAMESPACE_DECL


