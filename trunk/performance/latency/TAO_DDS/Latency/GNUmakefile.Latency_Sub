# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.Latency_Sub
#
# $Id: gnu.mpd,v 1.140 2005/11/12 00:18:58 jtc Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.Latency_Sub
DEPENDENCY_FILE  = .depend.Latency_Sub
BIN_UNCHECKED    = tao_sub

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  AckMessageTypeSupportC.cpp \
  AckMessageTypeSupportImpl.cpp \
  AckMessageTypeSupportS.cpp \
  DDSPerfTestC.cpp \
  DDSPerfTestS.cpp \
  PubComplexMessageTypeSupportC.cpp \
  PubComplexMessageTypeSupportImpl.cpp \
  PubComplexMessageTypeSupportS.cpp \
  PubMessageTypeSupportC.cpp \
  PubMessageTypeSupportImpl.cpp \
  PubMessageTypeSupportS.cpp \
  sample_sub.cpp \
  SubListener.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lTAO_DdsDcps -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)

ifeq ($(INSBIN),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSBIN)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =
tao_dont_use_idl_make_rule = 1
include $(TAO_ROOT)/rules.tao.GNU

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/Latency_Sub
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_DdsDcps TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(ACE_ROOT)/lib $(DDS_ROOT)/lib /usr/lib $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),TAO_DdsDcps TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(exceptions),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
else
  all: lib_warning
endif
else
  all: require_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(OUTPUT_DIRECTORY),)
ifneq ($(OUTPUT_DIRECTORY),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L$(DDS_ROOT)/lib
else
LDFLAGS      += -L. -L$(ACE_ROOT)/lib -L$(DDS_ROOT)/lib
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs -I$(DDS_ROOT)
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

require_warning:
	@echo This project will not be built due to one of the following missing features:
	@echo exceptions

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib
PATH              := $(PATH):$(ACE_ROOT)/lib

GENERATED_DIRTY += DDSPerfTestS.inl DDSPerfTestC.inl DDSPerfTestC.h DDSPerfTestS.h DDSPerfTestC.cpp DDSPerfTestS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) DDSPerfTest.idl -nt DDSPerfTestS.inl 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt DDSPerfTestC.inl 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt DDSPerfTestC.h 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt DDSPerfTestS.h 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt DDSPerfTestC.cpp 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt DDSPerfTestS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt DDSPerfTestS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt DDSPerfTestC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt DDSPerfTestC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt DDSPerfTestS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt DDSPerfTestC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt DDSPerfTestS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DDSPerfTestS.inl DDSPerfTestC.inl DDSPerfTestC.h DDSPerfTestS.h DDSPerfTestC.cpp DDSPerfTestS.cpp: DDSPerfTest.idl $(TAO_IDL_DEP)
	$(TAO_IDL) -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs -Gdcps -I $(DDS_ROOT) -Sc -St DDSPerfTest.idl

GENERATED_DIRTY += PubComplexMessageTypeSupportS.inl PubComplexMessageTypeSupportC.inl PubComplexMessageTypeSupportC.h PubComplexMessageTypeSupportS.h PubComplexMessageTypeSupportC.cpp PubComplexMessageTypeSupportS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) PubComplexMessageTypeSupport.idl -nt PubComplexMessageTypeSupportS.inl 2> /dev/null && $(TEST_EXE) PubComplexMessageTypeSupport.idl -nt PubComplexMessageTypeSupportC.inl 2> /dev/null && $(TEST_EXE) PubComplexMessageTypeSupport.idl -nt PubComplexMessageTypeSupportC.h 2> /dev/null && $(TEST_EXE) PubComplexMessageTypeSupport.idl -nt PubComplexMessageTypeSupportS.h 2> /dev/null && $(TEST_EXE) PubComplexMessageTypeSupport.idl -nt PubComplexMessageTypeSupportC.cpp 2> /dev/null && $(TEST_EXE) PubComplexMessageTypeSupport.idl -nt PubComplexMessageTypeSupportS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt PubComplexMessageTypeSupportS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubComplexMessageTypeSupportC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubComplexMessageTypeSupportC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubComplexMessageTypeSupportS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubComplexMessageTypeSupportC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubComplexMessageTypeSupportS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubComplexMessageTypeSupportS.inl PubComplexMessageTypeSupportC.inl PubComplexMessageTypeSupportC.h PubComplexMessageTypeSupportS.h PubComplexMessageTypeSupportC.cpp PubComplexMessageTypeSupportS.cpp: PubComplexMessageTypeSupport.idl $(TAO_IDL_DEP)
	$(TAO_IDL) -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs -Gdcps -I $(DDS_ROOT) -Sc -St PubComplexMessageTypeSupport.idl

GENERATED_DIRTY += PubMessageTypeSupportS.inl PubMessageTypeSupportC.inl PubMessageTypeSupportC.h PubMessageTypeSupportS.h PubMessageTypeSupportC.cpp PubMessageTypeSupportS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) PubMessageTypeSupport.idl -nt PubMessageTypeSupportS.inl 2> /dev/null && $(TEST_EXE) PubMessageTypeSupport.idl -nt PubMessageTypeSupportC.inl 2> /dev/null && $(TEST_EXE) PubMessageTypeSupport.idl -nt PubMessageTypeSupportC.h 2> /dev/null && $(TEST_EXE) PubMessageTypeSupport.idl -nt PubMessageTypeSupportS.h 2> /dev/null && $(TEST_EXE) PubMessageTypeSupport.idl -nt PubMessageTypeSupportC.cpp 2> /dev/null && $(TEST_EXE) PubMessageTypeSupport.idl -nt PubMessageTypeSupportS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt PubMessageTypeSupportS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubMessageTypeSupportC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubMessageTypeSupportC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubMessageTypeSupportS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubMessageTypeSupportC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt PubMessageTypeSupportS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubMessageTypeSupportS.inl PubMessageTypeSupportC.inl PubMessageTypeSupportC.h PubMessageTypeSupportS.h PubMessageTypeSupportC.cpp PubMessageTypeSupportS.cpp: PubMessageTypeSupport.idl $(TAO_IDL_DEP)
	$(TAO_IDL) -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs -Gdcps -I $(DDS_ROOT) -Sc -St PubMessageTypeSupport.idl

GENERATED_DIRTY += AckMessageTypeSupportS.inl AckMessageTypeSupportC.inl AckMessageTypeSupportC.h AckMessageTypeSupportS.h AckMessageTypeSupportC.cpp AckMessageTypeSupportS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) AckMessageTypeSupport.idl -nt AckMessageTypeSupportS.inl 2> /dev/null && $(TEST_EXE) AckMessageTypeSupport.idl -nt AckMessageTypeSupportC.inl 2> /dev/null && $(TEST_EXE) AckMessageTypeSupport.idl -nt AckMessageTypeSupportC.h 2> /dev/null && $(TEST_EXE) AckMessageTypeSupport.idl -nt AckMessageTypeSupportS.h 2> /dev/null && $(TEST_EXE) AckMessageTypeSupport.idl -nt AckMessageTypeSupportC.cpp 2> /dev/null && $(TEST_EXE) AckMessageTypeSupport.idl -nt AckMessageTypeSupportS.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(TAO_IDL_DEP) -nt AckMessageTypeSupportS.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt AckMessageTypeSupportC.inl 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt AckMessageTypeSupportC.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt AckMessageTypeSupportS.h 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt AckMessageTypeSupportC.cpp 2> /dev/null && $(TEST_EXE) $(TAO_IDL_DEP) -nt AckMessageTypeSupportS.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
AckMessageTypeSupportS.inl AckMessageTypeSupportC.inl AckMessageTypeSupportC.h AckMessageTypeSupportS.h AckMessageTypeSupportC.cpp AckMessageTypeSupportS.cpp: AckMessageTypeSupport.idl $(TAO_IDL_DEP)
	$(TAO_IDL) -Ge 1 -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs -Gdcps -I $(DDS_ROOT) -Sc -St AckMessageTypeSupport.idl

GENERATED_DIRTY += PubMessageTypeSupport.idl PubMessageTypeSupportImpl.h PubMessageTypeSupportImpl.cpp AckMessageTypeSupport.idl AckMessageTypeSupportImpl.h AckMessageTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) DDSPerfTest.idl -nt PubMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt PubMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt PubMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt AckMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt AckMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) DDSPerfTest.idl -nt AckMessageTypeSupportImpl.cpp 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(DDS_ROOT)/bin/dcps_ts.pl -nt PubMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/dcps_ts.pl -nt PubMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/dcps_ts.pl -nt PubMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/dcps_ts.pl -nt AckMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/dcps_ts.pl -nt AckMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/dcps_ts.pl -nt AckMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm -nt PubMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm -nt PubMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm -nt PubMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm -nt AckMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm -nt AckMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm -nt AckMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/HTemplate.pm -nt PubMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/HTemplate.pm -nt PubMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/HTemplate.pm -nt PubMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/HTemplate.pm -nt AckMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/HTemplate.pm -nt AckMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/HTemplate.pm -nt AckMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm -nt PubMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm -nt PubMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm -nt PubMessageTypeSupportImpl.cpp 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm -nt AckMessageTypeSupport.idl 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm -nt AckMessageTypeSupportImpl.h 2> /dev/null && $(TEST_EXE) $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm -nt AckMessageTypeSupportImpl.cpp 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubMessageTypeSupport.idl PubMessageTypeSupportImpl.h PubMessageTypeSupportImpl.cpp AckMessageTypeSupport.idl AckMessageTypeSupportImpl.h AckMessageTypeSupportImpl.cpp: DDSPerfTest.idl $(DDS_ROOT)/bin/dcps_ts.pl $(DDS_ROOT)/bin/DCPS/CPPTemplate.pm $(DDS_ROOT)/bin/DCPS/HTemplate.pm $(DDS_ROOT)/bin/DCPS/IDLTemplate.pm
	$(DDS_ROOT)/bin/dcps_ts.pl $(TAO_DCPS_TS_FLAGS) DDSPerfTest.idl

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += DDSPerfTest$(IDL_CLIENT_HDR_EXT) PubComplexMessageTypeSupport$(IDL_CLIENT_HDR_EXT) PubMessageTypeSupport$(IDL_CLIENT_HDR_EXT) AckMessageTypeSupport$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = AckMessageTypeSupportC.cpp AckMessageTypeSupportImpl.cpp AckMessageTypeSupportS.cpp DDSPerfTestC.cpp DDSPerfTestS.cpp PubComplexMessageTypeSupportC.cpp PubComplexMessageTypeSupportImpl.cpp PubComplexMessageTypeSupportS.cpp PubMessageTypeSupportC.cpp PubMessageTypeSupportImpl.cpp PubMessageTypeSupportS.cpp sample_sub.cpp SubListener.cpp
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DDSPerfTestC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DDSPerfTestS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubComplexMessageTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubComplexMessageTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubMessageTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubMessageTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:AckMessageTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:AckMessageTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubMessageTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:AckMessageTypeSupportImpl.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

ifneq ($(VXWORKSLINK),true)
ifeq ($(static_libs_only), 1)
  DEPLIBS = $(foreach lib, TAO_DdsDcps TAO_PortableServer TAO_AnyTypeCode TAO ACE , $(foreach libpath, . $(ACE_ROOT)/lib $(DDS_ROOT)/lib, $(wildcard $(libpath)/lib$(lib).a)))
endif

$(BIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
ifndef kylix
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $^ $(VLDLIBS) $(POSTLINK)
else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $(VLDLIBS) $(BORINITEXEOBJ) $(POSTLINK) $^, $@,,
endif
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

