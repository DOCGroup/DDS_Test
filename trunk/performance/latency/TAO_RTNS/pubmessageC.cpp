// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:311


#include "pubmessageC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "pubmessageC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:72

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:89



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:516


#ifndef _TAO_TYPECODE_pubdata_pubmessage__tao_seq_CORBA_Octet__GUARD
#define _TAO_TYPECODE_pubdata_pubmessage__tao_seq_CORBA_Octet__GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        pubdata_pubmessage__tao_seq_CORBA_Octet__0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_pubdata_pubmessage__tao_seq_CORBA_Octet__0 =
        &pubdata_pubmessage__tao_seq_CORBA_Octet__0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_pubdata_pubmessage__tao_seq_CORBA_Octet__GUARD */

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_pubdata_pubmessage[] =
      {
        { "seqnum", &CORBA::_tc_long },
        { "data", &TAO::TypeCode::tc_pubdata_pubmessage__tao_seq_CORBA_Octet__0 }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_pubdata_pubmessage (
  ::CORBA::tk_struct,
  "IDL:pubdata/pubmessage:1.0",
  "pubmessage",
  _tao_fields_pubdata_pubmessage,
  2);

namespace pubdata
{
  ::CORBA::TypeCode_ptr const _tc_pubmessage =
    &_tao_tc_pubdata_pubmessage;
}



// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:66

void 
pubdata::pubmessage::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  pubmessage *_tao_tmp_pointer =
    static_cast<pubmessage *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PUBDATA_PUBMESSAGE__TAO_SEQ_CORBA_OCTET__CS_)
#define _PUBDATA_PUBMESSAGE__TAO_SEQ_CORBA_OCTET__CS_

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (void)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (
    const _tao_seq_CORBA_Octet_ &seq
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (seq)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::~_tao_seq_CORBA_Octet_ (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// w:\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const pubdata::pubmessage &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<pubdata::pubmessage *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<pubdata::pubmessage>::insert_copy (
        _tao_any,
        pubdata::pubmessage::_tao_any_destructor,
        pubdata::_tc_pubmessage,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    pubdata::pubmessage *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<pubdata::pubmessage>::insert (
      _tao_any,
      pubdata::pubmessage::_tao_any_destructor,
      pubdata::_tc_pubmessage,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    pubdata::pubmessage *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const pubdata::pubmessage *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const pubdata::pubmessage *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<pubdata::pubmessage>::extract (
        _tao_any,
        pubdata::pubmessage::_tao_any_destructor,
        pubdata::_tc_pubmessage,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_pubdata_pubmessage__tao_seq_CORBA_Octet__CPP_
#define _TAO_CDR_OP_pubdata_pubmessage__tao_seq_CORBA_Octet__CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const pubdata::pubmessage::_tao_seq_CORBA_Octet_ &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    pubdata::pubmessage::_tao_seq_CORBA_Octet_ &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_pubdata_pubmessage__tao_seq_CORBA_Octet__CPP_ */

// TAO_IDL - Generated from
// w:\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const pubdata::pubmessage &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.seqnum) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    pubdata::pubmessage &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.seqnum) &&
    (strm >> _tao_aggregate.data);
}
TAO_END_VERSIONED_NAMESPACE_DECL



