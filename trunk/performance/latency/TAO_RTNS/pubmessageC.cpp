// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:292


#include "pubmessageC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "pubmessageC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
}


// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:937


#ifndef _TAO_TYPECODE_pubdata_pubmessage__tao_seq_CORBA_Octet__GUARD
#define _TAO_TYPECODE_pubdata_pubmessage__tao_seq_CORBA_Octet__GUARD
namespace TAO
{
  namespace TypeCode
  {
    TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
      pubdata_pubmessage__tao_seq_CORBA_Octet__0 (
        ::CORBA::tk_sequence,
        &CORBA::_tc_octet,
        0U);
      
    ::CORBA::TypeCode_ptr const tc_pubdata_pubmessage__tao_seq_CORBA_Octet__0 =
      &pubdata_pubmessage__tao_seq_CORBA_Octet__0;
    
  }
}


#endif /* _TAO_TYPECODE_pubdata_pubmessage__tao_seq_CORBA_Octet__GUARD */

static TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_pubdata_pubmessage[] =
  {
    { "seqnum", &CORBA::_tc_long },
    { "data", &TAO::TypeCode::tc_pubdata_pubmessage__tao_seq_CORBA_Octet__0 }
    
  };
static TAO::TypeCode::Struct<char const *,
                      ::CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_pubdata_pubmessage (
    ::CORBA::tk_struct,
    "IDL:pubdata/pubmessage:1.0",
    "pubmessage",
    _tao_fields_pubdata_pubmessage,
    2);
  
namespace pubdata
{
  ::CORBA::TypeCode_ptr const _tc_pubmessage =
    &_tao_tc_pubdata_pubmessage;
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
pubdata::pubmessage::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  pubmessage *_tao_tmp_pointer =
    static_cast<pubmessage *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PUBDATA_PUBMESSAGE__TAO_SEQ_CORBA_OCTET__CS_)
#define _PUBDATA_PUBMESSAGE__TAO_SEQ_CORBA_OCTET__CS_

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (void)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (
    ::CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (max)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (max, length, buffer, release)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::_tao_seq_CORBA_Octet_ (
    const _tao_seq_CORBA_Octet_ &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Octet
      >
    (seq)
{}

pubdata::pubmessage::_tao_seq_CORBA_Octet_::~_tao_seq_CORBA_Octet_ (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const pubdata::pubmessage &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<pubdata::pubmessage *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<pubdata::pubmessage>::insert_copy (
        _tao_any,
        pubdata::pubmessage::_tao_any_destructor,
        pubdata::_tc_pubmessage,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    pubdata::pubmessage *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<pubdata::pubmessage>::insert (
      _tao_any,
      pubdata::pubmessage::_tao_any_destructor,
      pubdata::_tc_pubmessage,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    pubdata::pubmessage *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const pubdata::pubmessage *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const pubdata::pubmessage *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<pubdata::pubmessage>::extract (
        _tao_any,
        pubdata::pubmessage::_tao_any_destructor,
        pubdata::_tc_pubmessage,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_pubdata_pubmessage__tao_seq_CORBA_Octet__CPP_
#define _TAO_CDR_OP_pubdata_pubmessage__tao_seq_CORBA_Octet__CPP_

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const pubdata::pubmessage::_tao_seq_CORBA_Octet_ &_tao_sequence
  )
{
  const ::CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      {
        TAO_Unbounded_Sequence< ::CORBA::Octet> *_tao_octet_seq = 
          static_cast<TAO_Unbounded_Sequence< ::CORBA::Octet> *> (const_cast<pubdata::pubmessage::_tao_seq_CORBA_Octet_ *> (&_tao_sequence));
        if (_tao_octet_seq->mb ())
          return strm.write_octet_array_mb (_tao_octet_seq->mb ());
        else
          return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
      }
      
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.write_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    }
  
  return false;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    pubdata::pubmessage::_tao_seq_CORBA_Octet_ &_tao_sequence
  )
{
  ::CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      
#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      if (ACE_BIT_DISABLED (strm.start ()->flags (),
      ACE_Message_Block::DONT_DELETE))
      {
        TAO_ORB_Core* orb_core = strm.orb_core ();
        if (orb_core != 0 &&
        strm.orb_core ()->resource_factory ()->
        input_cdr_allocator_type_locked () == 1)
        {
          TAO_Unbounded_Sequence< ::CORBA::Octet> *oseq = 
            static_cast<TAO_Unbounded_Sequence< ::CORBA::Octet> *> (&_tao_sequence);
          oseq->replace (_tao_seq_len, strm.start ());
          oseq->mb ()->wr_ptr (oseq->mb()->rd_ptr () + _tao_seq_len);
          strm.skip_bytes (_tao_seq_len);
          return 1;
        }
      }
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_seq_len);
#else /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
      return strm.read_octet_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
#endif /* TAO_NO_COPY_OCTET_SEQUENCES == 0 */
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_pubdata_pubmessage__tao_seq_CORBA_Octet__CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const pubdata::pubmessage &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.seqnum) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    pubdata::pubmessage &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.seqnum) &&
    (strm >> _tao_aggregate.data);
}


TAO_END_VERSIONED_NAMESPACE_DECL


