# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.Latency_Client
#
# $Id: gnu.mpd,v 1.140 2005/11/12 00:18:58 jtc Exp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.Latency_Client
DEPENDENCY_FILE  = .depend.Latency_Client
BIN_UNCHECKED    = client

FILES = \
  Client.cpp \
  soapC.cpp \
  soapClient.cpp \
  stdsoap2.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lStats -lACE

ifeq ($(INSBIN),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSBIN)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/Latency_Client
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,Stats ACE,$(findstring $(lib),$(foreach libpath,. $(ACE_ROOT)/lib /usr/lib $(INSLIB),$(wildcard $(libpath)/lib$(lib).* $(libpath)/$(lib).lib)))),Stats ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
else
  all: lib_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(OUTPUT_DIRECTORY),)
ifneq ($(OUTPUT_DIRECTORY),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),true)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),true)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib
else
LDFLAGS      += -L. -L$(ACE_ROOT)/lib
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(STATS_ROOT)
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(SOAP_ROOT)
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(SOAP_ROOT)
SHLIB_PATH        := $(SHLIB_PATH):$(SOAP_ROOT)
LIBPATH           := $(LIBPATH):$(SOAP_ROOT)
PATH              := $(PATH):$(SOAP_ROOT)

GENERATED_DIRTY += soapC.cpp soapClient.cpp soapServer.cpp soapH.h soapStub.h soaplatencyObject.h soaplatencyProxy.h latency.nsmap
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifneq ($(shell $(TEST_EXE) Test.h -nt soapC.cpp 2> /dev/null && $(TEST_EXE) Test.h -nt soapClient.cpp 2> /dev/null && $(TEST_EXE) Test.h -nt soapServer.cpp 2> /dev/null && $(TEST_EXE) Test.h -nt soapH.h 2> /dev/null && $(TEST_EXE) Test.h -nt soapStub.h 2> /dev/null && $(TEST_EXE) Test.h -nt soaplatencyObject.h 2> /dev/null && $(TEST_EXE) Test.h -nt soaplatencyProxy.h 2> /dev/null && $(TEST_EXE) Test.h -nt latency.nsmap 2> /dev/null && echo 0),)
      .NOTPARALLEL:
    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifneq ($(shell $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soapC.cpp 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soapClient.cpp 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soapServer.cpp 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soapH.h 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soapStub.h 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soaplatencyObject.h 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt soaplatencyProxy.h 2> /dev/null && $(TEST_EXE) $(SOAP_ROOT)/soapcpp2 -nt latency.nsmap 2> /dev/null && echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
soapC.cpp soapClient.cpp soapServer.cpp soapH.h soapStub.h soaplatencyObject.h soaplatencyProxy.h latency.nsmap: Test.h $(SOAP_ROOT)/soapcpp2
	$(SOAP_ROOT)/soapcpp2 -L -w Test.h

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),true)
ifeq ($(static_libs_only), 1)
  DEPLIBS = $(foreach lib, Stats ACE , $(foreach libpath, . $(ACE_ROOT)/lib, $(wildcard $(libpath)/lib$(lib).a)))
endif

$(BIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
ifndef kylix
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $^ $(VLDLIBS) $(POSTLINK)
else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $(VLDLIBS) $(BORINITEXEOBJ) $(POSTLINK) $^, $@,,
endif
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

