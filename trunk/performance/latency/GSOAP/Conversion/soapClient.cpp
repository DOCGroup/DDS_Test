/* soapClient.cpp
   Generated by gSOAP 2.7.6c from Test.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.6c 2005-11-29 20:30:54 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__conversionByteArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct gSOAP_byte_array in, unsigned long &seq_num)
{	struct ns__conversionByteArray soap_tmp_ns__conversionByteArray;
	struct ns__conversionByteArrayResponse *soap_tmp_ns__conversionByteArrayResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080";
	soap->encodingStyle = NULL;
	soap_tmp_ns__conversionByteArray.in = in;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__conversionByteArray(soap, &soap_tmp_ns__conversionByteArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__conversionByteArray(soap, &soap_tmp_ns__conversionByteArray, "ns:conversionByteArray", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__conversionByteArray(soap, &soap_tmp_ns__conversionByteArray, "ns:conversionByteArray", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_unsignedLong(soap, &seq_num);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__conversionByteArrayResponse = soap_get_ns__conversionByteArrayResponse(soap, NULL, "ns:conversionByteArrayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	seq_num = soap_tmp_ns__conversionByteArrayResponse->seq_num;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__conversionNestedArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct gSOAP_outer_array in, unsigned long &seq_num)
{	struct ns__conversionNestedArray soap_tmp_ns__conversionNestedArray;
	struct ns__conversionNestedArrayResponse *soap_tmp_ns__conversionNestedArrayResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080";
	soap->encodingStyle = NULL;
	soap_tmp_ns__conversionNestedArray.in = in;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__conversionNestedArray(soap, &soap_tmp_ns__conversionNestedArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__conversionNestedArray(soap, &soap_tmp_ns__conversionNestedArray, "ns:conversionNestedArray", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__conversionNestedArray(soap, &soap_tmp_ns__conversionNestedArray, "ns:conversionNestedArray", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_unsignedLong(soap, &seq_num);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__conversionNestedArrayResponse = soap_get_ns__conversionNestedArrayResponse(soap, NULL, "ns:conversionNestedArrayResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	seq_num = soap_tmp_ns__conversionNestedArrayResponse->seq_num;
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
