#!/usr/bin/perl

#Report generating script.
#Author: Hieu Nguyen

#This script is expected to be run within the
#results directory on the NFS partition.
use IO::File;
use File::Copy;

#directories and default file formats generated by each test
#path to NFS partition
$nfs = "/export/home/tczar/";
$bagatel = $nfs . "Grapha/";
$results_dir = $nfs . "DDS/results/";
$settings_file = "settings.dat";
$platform = "Linux"; #default platform is Linux

$detailed_summary = 0;
$use_report_for_summary = 0;
$test_id = "";

if (@ARGV == 0) {
  print "Usage: \n";
  print "       ./makeddsreport.pl -t TEST_ID [-a] [-s] [-r TEST_ID] [-clean] \n\n";
  print "  -t     : specify the test [directory] the raw data is under.\n";
  print "  -a     : generate detailed report (all subscribers' graphs).\n";
  print "  -s     : use this test result for the final summary report for all DDS implementations.\n";
  print "  -r     : remove test report for [test ID].\n";
  print "  -clean : clean the report.\n";
  print "Example:\n";
  print "       ./makeddsreport.pl -t 1 -s\n";
  exit 1;
}

#reading arguments from command line
while (@ARGV > 0) {
  $myarg = shift (@ARGV);

  if ($myarg eq "-t") {
    $test_id = shift (@ARGV);
    $test_dir = $results_dir . $test_id . "/";

    if (-e $test_dir) {
      print "Generating report for test #" . $test_id . "...\n";
    } else {
      die "Test '/" . $test_id . "' directory does not exist.\n";
    }
  }

  elsif ($myarg eq "-r") {
    $remove_id = shift (@ARGV);

    # quick solution, can be improved
    $remove_dir1 = $bagatel . "Bunch_Of_Results/_Result/NDDS_Linux/Throughput/" . $remove_id;
    $remove_dir2 = $bagatel . "Bunch_Of_Results/_Result/Splice_Linux/Throughput/" . $remove_id;
    $remove_dir3 = $bagatel . "Bunch_Of_Results/_Result/TAO_DDS_Linux/Throughput/" . $remove_id;
  
    if (-e $remove_dir1 || -e $remove_dir2 || -e $remove_dir3) {
      print "Removing report for test #" . $remove_id . "...\n";
      if (chdir $remove_dir1) {
        unlink <*>;
        rmdir $remove_dir1;
      }
      elsif (chdir $remove_dir2) {
        unlink <*>;
        rmdir $remove_dir2;  
      }
      elsif (chdir $remove_dir3) {
        unlink <*>;
        rmdir $remove_dir3;
      }
    } else {
      print "Test '/" . $remove_id . "' does not exist under Bagatel.\n";
    }
  
    exit (0);
  }

  elsif ($myarg eq "-clean") {
    $del_dir = $bagatel . "Bunch_Of_Results/_Result/";

    # quick add-on
    if (-e $del_dir . "NDDS_Linux/Throughput") {
      system ("rm -r /export/home/tczar/Grapha/Bunch_Of_Results/_Result/NDDS_Linux/Throughput");
    }
    if (-e $del_dir . "Splice_Linux/Throughput") {
      system ("rm -r /export/home/tczar/Grapha/Bunch_Of_Results/_Result/Splice_Linux/Throughput");
    }
    if (-e $del_dir . "TAO_DDS_Linux/Throughput") {
      system ("rm -r /export/home/tczar/Grapha/Bunch_Of_Results/_Result/TAO_DDS_Linux/Throughput");
    }

    exit (0);
  }

  elsif ($myarg eq "-a") {
    $detailed_summary = 1;
  }
  elsif ($myarg eq "-s") {
    $use_report_for_summary = 1;
  }
  else {
    print "Argument $myarg not supported.\n";
  }
}

if ($test_id eq "") {
  print "Test ID not specified.\n";
  print "Use -t TEST_ID to enter test ID.\n";
  exit 1;
}

if (chdir $test_dir) {
  print "Done reading arguments.\n";
} else {
  print "Cannot open test directory.\n";
  exit (1);
}

print "\n\n";
print "           +----------------------------------+                 \n";
print "           | DDS Benchmark Report Generation  |                 \n";
print "           +----------------------------------+                 \n";
print "\n\n";

$filehandle = new IO::File;

#open settings file
$filename = $test_dir . $settings_file;
$filehandle->open("<" . $filename)
    or die "settings.dat not found!\n";

#get platform, implementation & benchmark info from settings file
until ($filehandle->eof) {
  $line = $filehandle->getline;
  chomp $line;

  if ($line =~ /^impl=/) {
    @result = split ( /=/, $line);
    $impl = lc ($result [1]);    
    print "impl is " . $impl . "\n";
  } 
 
  if ($line =~ /^type=/) {
    @result = split ( /=/, $line);
    $benchtype = lc ($result [1]);
    print "benchmark type is " . $benchtype . "\n";
  }
  
  if ($line =~ /^platform/) {
    @result = split ( /=/, $line);
    $platform = lc ($result [1]);
    print "platform is " . $platform . "\n";
  }  
} 

$filehandle->close;


#get list of raw data files in current test directory
#assuming they have the following format:
#   pub[pubID].stats
#   sub[subID].stats
#along with the raw data files are settings files of
#each of the pub/sub:
#   pub[pubID].params
#   pub[pubID].settings
#or
#   sub[subID].params
#   sub[subID].settings

opendir (TESTDIR, $test_dir)
  or die "Can't open current test directory!\n";

while ($a_file = readdir (TESTDIR)) {
  if ($a_file =~ /^sub[0-9]+.stats$/)
  {
    push (@sublist, $a_file);
  }
  if ($a_file =~ /^pub[0-9]+.stats$/)
  {
    push (@publist, $a_file);
  }
}

if ($detailed_summary == 1) {
  @rawlist = (@sublist, @publist);
}
else {
  @rawlist = @publist;
}


print "\nRaw data files:\n";
foreach $a_file (@rawlist) {
  print $a_file . "\n";
}
print "\n";

closedir TESTDIR;

#collect data from all subscribers and put them into one Bagatel's file.
#script collect_convert.pl is assumed to be in the same dir as makeddsreport.pl
#collect_convert.pl also makes sure that the raw data is not corrupted.
$subargs = "";
foreach $element (@sublist) {
  $subargs .= " ";
  $subargs .= $element;
}
system ("perl ./collect_convert.pl " . $test_dir . $subargs);

#create subdirs under Bagatel tree so the converted
#results can be copied to their proper locations.
#(Display.php looks for subdirs "Round_Trip" or
#"Throughput" under each broker/platform dir.)

if ($benchtype eq "throughput" || $benchtype eq "thruput" || $benchtype eq "tput") {
  $convert = $results_dir . "Convert_tput ";
  $newdir = "Throughput";
}

if ($benchtype eq "roundtrip" || $benchtype eq "round_trip" ||
    $benchtype eq "rtrip" || $benchtype eq "latency") {
  $convert = $results_dir . "Convert_rtrip "; 
  $newdir = "Round_Trip";
}

if ($impl eq "tao" || $impl eq "tao-dds" || $impl eq "tao_dds") {
  $impl_plat_dir = "TAO_DDS_Linux";
  #remove old results if existed
  if (chdir $bagatel . "Bunch_Of_Results/_Result/TAO_DDS_Linux/" . $newdir . "/" . $test_id) {
    print "Delete old results (if existed)...", unlink (<*>), " files.\n";
  }
}
if ($impl eq "splice") {
  $impl_plat_dir = "Splice_Linux";
  #remove old results if existed
  if (chdir $bagatel . "Bunch_Of_Results/_Result/Splice_Linux/" . $newdir . "/" . $test_id) {
    print "Delete old results (if existed): ", unlink (<*>), " files.\n";
  }
}
if ($impl eq "ndds") {
  $impl_plat_dir = "NDDS_Linux";
  #remove old results if existed
  if (chdir $bagatel . "Bunch_Of_Results/_Result/NDDS_Linux/" . $newdir . "/" . $test_id) {
    print 'Delete old results (if existed): ', unlink (<*>), ' files.\n';
  }
}


#create new directory for results
print "\nNew dir = " . $bagatel . "Bunch_Of_Results/_Result/" . $impl_plat_dir . "/" . $newdir . "\n";
$newdir_path = $bagatel . "Bunch_Of_Results/_Result/" . $impl_plat_dir . "/" . $newdir;
mkdir $newdir_path;
$newtestdir = $newdir_path . "/" . $test_id;
mkdir $newtestdir;

#convert raw data files to Bagatel's format
print "\nUse convert script:\n" . $convert . "\n\n";

foreach $a_file (@rawlist) {
  system($convert . $test_dir . $a_file);
}


#copy the converted results to their designated directory
#the names of the converted results are generated by the Convert_rtrip
#or Convert_tput script (under NFS results directory).
#the names of the final results under Bagatel must be in the
#format that Bagatel expects in Display.php
print "\nCopy converted results to designated directory in Bagatel...\n";
foreach $a_file (@rawlist) {
    $old = $test_dir . $a_file . ".0";
    print "File to copy: " . $old . "\n";
    print "Copy to: " . $newtestdir . "\n";
    copy($old, $newtestdir);
}

print "File to copy: " . $test_dir . "subs_range.stats.0\n";
print "Copy to: " . $newtestdir . "\n";
copy($test_dir . "subs_range.stats.0", $newtestdir);
print "File to copy: " . $test_dir . "settings.dat\n";
print "Copy to: " . $newtestdir . "\n";
copy($test_dir . "settings.dat", $newtestdir);

if ($use_report_for_summary == 1) {
  print "Use this report for summary graph...\n";
  print "File to copy: " . $test_dir . "subs_range.stats.0\n";
  print "Copy to: " . $newdir_path . "\n";

  copy($test_dir . "subs_range.stats.0", $newdir_path);
}

#let Bagatel take over,
#Bagatel will use the converted data to generate
#the graph images and putting the final report on the webserver.
chdir $bagatel;
print "change dir to: " . $bagatel . "\n";
print "\n(Bagatel) Generating images from data...\n";
system("perl ./makegraph.pl");
