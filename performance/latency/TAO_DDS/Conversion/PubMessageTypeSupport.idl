
// $Id: IDLTemplate.pm,v 1.1.1.1 2005/06/10 18:18:48 fields_t Exp $

// Generated by dcps_ts.pl

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsDataWriterRemote.idl"
#include "dds/DdsDcpsDataReaderRemote.idl"
#include "dds/DdsDcpsTypeSupportTao.idl"

#include "DDSPerfTest.idl"



typedef sequence<DDSPerfTest::PubMessage> PubMessageSeq;

/** Support topic registartion for PubMessage data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of  
 * this interface.
 */
interface PubMessageTypeSupport : TAO::DCPS::TypeSupport {
    DDS::ReturnCode_t register_type(
                in DDS::DomainParticipant participant,
                in string type_name);
};

/** DataWriter interface for PubMessage data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of  
 * this interface.
 */
interface PubMessageDataWriter : TAO::DCPS::DataWriterRemote {
    DDS::InstanceHandle_t register(
                in DDSPerfTest::PubMessage instance_data);

    DDS::InstanceHandle_t register_w_timestamp(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t handle,
                in DDS::Time_t source_timestamp);

    DDS::ReturnCode_t unregister(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t handle);

    DDS::ReturnCode_t unregister_w_timestamp(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t handle,
                in DDS::Time_t source_timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    DDS::ReturnCode_t write(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    DDS::ReturnCode_t write_w_timestamp(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t handle,
                in DDS::Time_t source_timestamp);

    DDS::ReturnCode_t dispose(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t instance_handle);

    DDS::ReturnCode_t dispose_w_timestamp(
                in DDSPerfTest::PubMessage instance_data,
                in DDS::InstanceHandle_t instance_handle,
                in DDS::Time_t source_timestamp);

    DDS::ReturnCode_t get_key_value(
                inout DDSPerfTest::PubMessage key_holder,
                in DDS::InstanceHandle_t handle);
};

/** DataReader interface for PubMessage data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of  
 * this interface.
 */
interface PubMessageDataReader : TAO::DCPS::DataReaderRemote {
    DDS::ReturnCode_t read(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t take(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t read_next_sample(
                inout DDSPerfTest::PubMessage received_data,
                inout DDS::SampleInfo sample_info);

    DDS::ReturnCode_t take_next_sample(
                inout DDSPerfTest::PubMessage received_data,
                inout DDS::SampleInfo sample_info);

    DDS::ReturnCode_t read_instance(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t take_instance(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t read_next_instance(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t take_next_instance(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in DDS::InstanceHandle_t a_handle,
                in DDS::SampleStateMask sample_states,
                in DDS::ViewStateMask view_states,
                in DDS::InstanceStateMask instance_states);

    DDS::ReturnCode_t return_loan(
                inout PubMessageSeq received_data,
                inout DDS::SampleInfoSeq info_seq);

    DDS::ReturnCode_t get_key_value(
                inout DDSPerfTest::PubMessage key_holder,
                in DDS::InstanceHandle_t handle);
};



