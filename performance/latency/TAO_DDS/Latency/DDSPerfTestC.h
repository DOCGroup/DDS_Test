// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:164

#ifndef _TAO_IDL_DDSPERFTESTC_H_
#define _TAO_IDL_DDSPERFTESTC_H_

#include /**/ "ace/pre.h"


#include "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/ORB.h"
#include "tao/Environment.h"
#include "dds/DCPS/Serializer.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:49

namespace DDSPerfTest
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

#if !defined (_DDSPERFTEST_OCTETSEQ_CH_)
#define _DDSPERFTEST_OCTETSEQ_CH_
  
  class OctetSeq;
  
  typedef
    TAO_FixedSeq_Var_T<
        OctetSeq,
        CORBA::Octet
      >
    OctetSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        OctetSeq,
        OctetSeq_var,
        CORBA::Octet
      >
    OctetSeq_out;
  
  class  OctetSeq
    : public
        TAO_Unbounded_Sequence<
            CORBA::Octet
          >
  {
  public:
    OctetSeq (void);
    OctetSeq ( ::CORBA::ULong max);
    OctetSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Octet* buffer, 
        ::CORBA::Boolean release = 0
      );
    OctetSeq (const OctetSeq &);
    ~OctetSeq (void);
    
    typedef OctetSeq_var _var_type;

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    OctetSeq (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : TAO_Unbounded_Sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:258
  
  struct Nested;
  
  typedef
    TAO_Var_Var_T<
        Nested
      >
    Nested_var;
  
  typedef
    TAO_Out_T<
        Nested,
        Nested_var
      >
    Nested_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:57
  
  struct  Nested
  {
    typedef Nested_var _var_type;
    
    
    TAO_String_Manager info;
    ::CORBA::Long index;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

#if !defined (_DDSPERFTEST_NESTEDSEQ_CH_)
#define _DDSPERFTEST_NESTEDSEQ_CH_
  
  class NestedSeq;
  
  typedef
    TAO_VarSeq_Var_T<
        NestedSeq,
        Nested
      >
    NestedSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        NestedSeq,
        NestedSeq_var,
        Nested
      >
    NestedSeq_out;
  
  class  NestedSeq
    : public
        TAO_Unbounded_Sequence<
            Nested
          >
  {
  public:
    NestedSeq (void);
    NestedSeq ( ::CORBA::ULong max);
    NestedSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Nested* buffer, 
        ::CORBA::Boolean release = 0
      );
    NestedSeq (const NestedSeq &);
    ~NestedSeq (void);
    
    typedef NestedSeq_var _var_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:258
  
  struct Outer;
  
  typedef
    TAO_Var_Var_T<
        Outer
      >
    Outer_var;
  
  typedef
    TAO_Out_T<
        Outer,
        Outer_var
      >
    Outer_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:57
  
  struct  Outer
  {
    typedef Outer_var _var_type;
    
    
    ::CORBA::Long length;
    DDSPerfTest::NestedSeq nested_member;
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

#if !defined (_DDSPERFTEST_OUTERSEQ_CH_)
#define _DDSPERFTEST_OUTERSEQ_CH_
  
  class OuterSeq;
  
  typedef
    TAO_VarSeq_Var_T<
        OuterSeq,
        Outer
      >
    OuterSeq_var;
  
  typedef
    TAO_Seq_Out_T<
        OuterSeq,
        OuterSeq_var,
        Outer
      >
    OuterSeq_out;
  
  class  OuterSeq
    : public
        TAO_Unbounded_Sequence<
            Outer
          >
  {
  public:
    OuterSeq (void);
    OuterSeq ( ::CORBA::ULong max);
    OuterSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Outer* buffer, 
        ::CORBA::Boolean release = 0
      );
    OuterSeq (const OuterSeq &);
    ~OuterSeq (void);
    
    typedef OuterSeq_var _var_type;
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:258
  
  struct PubMessage;
  
  typedef
    TAO_Var_Var_T<
        PubMessage
      >
    PubMessage_var;
  
  typedef
    TAO_Out_T<
        PubMessage,
        PubMessage_var
      >
    PubMessage_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:57
  
  struct  PubMessage
  {
    typedef PubMessage_var _var_type;
    
    
    ::CORBA::ULong seqnum;
    DDSPerfTest::OctetSeq data;
  };
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:258
  
  struct PubComplexMessage;
  
  typedef
    TAO_Var_Var_T<
        PubComplexMessage
      >
    PubComplexMessage_var;
  
  typedef
    TAO_Out_T<
        PubComplexMessage,
        PubComplexMessage_var
      >
    PubComplexMessage_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:57
  
  struct  PubComplexMessage
  {
    typedef PubComplexMessage_var _var_type;
    
    
    ::CORBA::ULong seqnum;
    DDSPerfTest::OuterSeq data;
  };
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:258
  
  struct AckMessage;
  
  typedef
    TAO_Fixed_Var_T<
        AckMessage
      >
    AckMessage_var;
  
  typedef
    AckMessage &
    AckMessage_out;
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/structure_ch.cpp:57
  
  struct  AckMessage
  {
    typedef AckMessage_var _var_type;
    
    
    ::CORBA::Long seqnum;
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:78

} // module DDSPerfTest

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:61

// Traits specializations.
namespace TAO
{
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_DDSPerfTest_OctetSeq_H_
#define _TAO_CDR_OP_DDSPerfTest_OctetSeq_H_

 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const DDSPerfTest::OctetSeq &
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    DDSPerfTest::OctetSeq &
  );

#endif /* _TAO_CDR_OP_DDSPerfTest_OctetSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DDSPerfTest::Nested &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DDSPerfTest::Nested &);

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_DDSPerfTest_NestedSeq_H_
#define _TAO_CDR_OP_DDSPerfTest_NestedSeq_H_

 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const DDSPerfTest::NestedSeq &
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    DDSPerfTest::NestedSeq &
  );

#endif /* _TAO_CDR_OP_DDSPerfTest_NestedSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DDSPerfTest::Outer &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DDSPerfTest::Outer &);

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_DDSPerfTest_OuterSeq_H_
#define _TAO_CDR_OP_DDSPerfTest_OuterSeq_H_

 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const DDSPerfTest::OuterSeq &
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    DDSPerfTest::OuterSeq &
  );

#endif /* _TAO_CDR_OP_DDSPerfTest_OuterSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DDSPerfTest::PubMessage &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DDSPerfTest::PubMessage &);

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DDSPerfTest::PubComplexMessage &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DDSPerfTest::PubComplexMessage &);

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DDSPerfTest::AckMessage &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, DDSPerfTest::AckMessage &);

// TAO_IDL - Generated from
// be/be_visitor_sequence/serializer_op_ch.cpp:71

#if !defined _TAO_SERIALIZER_OP_DDSPerfTest_OctetSeq_H_
#define _TAO_SERIALIZER_OP_DDSPerfTest_OctetSeq_H_

 ::CORBA::Boolean _tao_is_bounded_size (
    const DDSPerfTest::OctetSeq &
  );
 size_t _dcps_max_marshaled_size (
    const DDSPerfTest::OctetSeq &
  );
 size_t _dcps_find_size (
    const DDSPerfTest::OctetSeq &
  );


 ::CORBA::Boolean operator<< (
    TAO::DCPS::Serializer &,
    const DDSPerfTest::OctetSeq &
  );
 ::CORBA::Boolean operator>> (
    TAO::DCPS::Serializer &,
    DDSPerfTest::OctetSeq &
  );

#endif /* _TAO_SERIALIZER_OP_DDSPerfTest_OctetSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/serializer_op_ch.cpp:56

 size_t _dcps_max_marshaled_size (const DDSPerfTest::Nested& _tao_aggregate);
 ::CORBA::Boolean _tao_is_bounded_size (const DDSPerfTest::Nested& _tao_aggregate);
 size_t _dcps_find_size (const DDSPerfTest::Nested& _tao_aggregate);
 ::CORBA::Boolean operator<< (TAO::DCPS::Serializer &, const DDSPerfTest::Nested &);
 ::CORBA::Boolean operator>> (TAO::DCPS::Serializer &, DDSPerfTest::Nested &);

// TAO_IDL - Generated from
// be/be_visitor_sequence/serializer_op_ch.cpp:71

#if !defined _TAO_SERIALIZER_OP_DDSPerfTest_NestedSeq_H_
#define _TAO_SERIALIZER_OP_DDSPerfTest_NestedSeq_H_

 ::CORBA::Boolean _tao_is_bounded_size (
    const DDSPerfTest::NestedSeq &
  );
 size_t _dcps_max_marshaled_size (
    const DDSPerfTest::NestedSeq &
  );
 size_t _dcps_find_size (
    const DDSPerfTest::NestedSeq &
  );


 ::CORBA::Boolean operator<< (
    TAO::DCPS::Serializer &,
    const DDSPerfTest::NestedSeq &
  );
 ::CORBA::Boolean operator>> (
    TAO::DCPS::Serializer &,
    DDSPerfTest::NestedSeq &
  );

#endif /* _TAO_SERIALIZER_OP_DDSPerfTest_NestedSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/serializer_op_ch.cpp:56

 size_t _dcps_max_marshaled_size (const DDSPerfTest::Outer& _tao_aggregate);
 ::CORBA::Boolean _tao_is_bounded_size (const DDSPerfTest::Outer& _tao_aggregate);
 size_t _dcps_find_size (const DDSPerfTest::Outer& _tao_aggregate);
 ::CORBA::Boolean operator<< (TAO::DCPS::Serializer &, const DDSPerfTest::Outer &);
 ::CORBA::Boolean operator>> (TAO::DCPS::Serializer &, DDSPerfTest::Outer &);

// TAO_IDL - Generated from
// be/be_visitor_sequence/serializer_op_ch.cpp:71

#if !defined _TAO_SERIALIZER_OP_DDSPerfTest_OuterSeq_H_
#define _TAO_SERIALIZER_OP_DDSPerfTest_OuterSeq_H_

 ::CORBA::Boolean _tao_is_bounded_size (
    const DDSPerfTest::OuterSeq &
  );
 size_t _dcps_max_marshaled_size (
    const DDSPerfTest::OuterSeq &
  );
 size_t _dcps_find_size (
    const DDSPerfTest::OuterSeq &
  );


 ::CORBA::Boolean operator<< (
    TAO::DCPS::Serializer &,
    const DDSPerfTest::OuterSeq &
  );
 ::CORBA::Boolean operator>> (
    TAO::DCPS::Serializer &,
    DDSPerfTest::OuterSeq &
  );

#endif /* _TAO_SERIALIZER_OP_DDSPerfTest_OuterSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/serializer_op_ch.cpp:56

 ::CORBA::Boolean _dcps_has_key(const DDSPerfTest::PubMessage& val);
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  PubMessageKeyLessThan 
{
  bool operator() (
      const DDSPerfTest::PubMessage& v1,
      const DDSPerfTest::PubMessage& v2) const
  {
    ACE_UNUSED_ARG(v1);
    ACE_UNUSED_ARG(v2);
    // if no DCPS_DATA_KEY values then return false
    // to allow use of map with just one entry
    return false;
    }
  };
  
   size_t _dcps_max_marshaled_size (const DDSPerfTest::PubMessage& _tao_aggregate);
   ::CORBA::Boolean _tao_is_bounded_size (const DDSPerfTest::PubMessage& _tao_aggregate);
   size_t _dcps_find_size (const DDSPerfTest::PubMessage& _tao_aggregate);
   ::CORBA::Boolean operator<< (TAO::DCPS::Serializer &, const DDSPerfTest::PubMessage &);
   ::CORBA::Boolean operator>> (TAO::DCPS::Serializer &, DDSPerfTest::PubMessage &);
  
  // TAO_IDL - Generated from
  // be/be_visitor_structure/serializer_op_ch.cpp:56
  
   ::CORBA::Boolean _dcps_has_key(const DDSPerfTest::PubComplexMessage& val);
  // This structure supports use of std::map with a key
  // defined by one or more #pragma DCPS_DATA_KEY lines.
  struct  PubComplexMessageKeyLessThan 
  {
    bool operator() (
        const DDSPerfTest::PubComplexMessage& v1,
        const DDSPerfTest::PubComplexMessage& v2) const
    {
      ACE_UNUSED_ARG(v1);
      ACE_UNUSED_ARG(v2);
      // if no DCPS_DATA_KEY values then return false
      // to allow use of map with just one entry
      return false;
      }
    };
    
     size_t _dcps_max_marshaled_size (const DDSPerfTest::PubComplexMessage& _tao_aggregate);
     ::CORBA::Boolean _tao_is_bounded_size (const DDSPerfTest::PubComplexMessage& _tao_aggregate);
     size_t _dcps_find_size (const DDSPerfTest::PubComplexMessage& _tao_aggregate);
     ::CORBA::Boolean operator<< (TAO::DCPS::Serializer &, const DDSPerfTest::PubComplexMessage &);
     ::CORBA::Boolean operator>> (TAO::DCPS::Serializer &, DDSPerfTest::PubComplexMessage &);
    
    // TAO_IDL - Generated from
    // be/be_visitor_structure/serializer_op_ch.cpp:56
    
     ::CORBA::Boolean _dcps_has_key(const DDSPerfTest::AckMessage& val);
    // This structure supports use of std::map with a key
    // defined by one or more #pragma DCPS_DATA_KEY lines.
    struct  AckMessageKeyLessThan 
    {
      bool operator() (
          const DDSPerfTest::AckMessage& v1,
          const DDSPerfTest::AckMessage& v2) const
      {
        ACE_UNUSED_ARG(v1);
        ACE_UNUSED_ARG(v2);
        // if no DCPS_DATA_KEY values then return false
        // to allow use of map with just one entry
        return false;
        }
      };
      
       size_t _dcps_max_marshaled_size (const DDSPerfTest::AckMessage& _tao_aggregate);
       ::CORBA::Boolean _tao_is_bounded_size (const DDSPerfTest::AckMessage& _tao_aggregate);
       size_t _dcps_find_size (const DDSPerfTest::AckMessage& _tao_aggregate);
       ::CORBA::Boolean operator<< (TAO::DCPS::Serializer &, const DDSPerfTest::AckMessage &);
       ::CORBA::Boolean operator>> (TAO::DCPS::Serializer &, DDSPerfTest::AckMessage &);
      
      // TAO_IDL - Generated from
      // be/be_codegen.cpp:1101

TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "DDSPerfTestC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */
      
      
