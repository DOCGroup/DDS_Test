// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from 
// be/be_codegen.cpp:586

#ifndef _TAO_IDL_PUBCOMPLEXMESSAGETYPESUPPORTS_CPP_
#define _TAO_IDL_PUBCOMPLEXMESSAGETYPESUPPORTS_CPP_


#include "PubComplexMessageTypeSupportS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/Basic_Arguments.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "PubComplexMessageTypeSupportS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:888

#if !defined (_DDS_TIME_T__SARG_TRAITS_)
#define _DDS_TIME_T__SARG_TRAITS_
  
  template<>
  class SArg_Traits<DDS::Time_t>
    : public
        Fixed_Size_SArg_Traits_T<
            DDS::Time_t,
            TAO::Any_Insert_Policy_Noop <DDS::Time_t>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:888

#if !defined (_DDS_SAMPLEINFO__SARG_TRAITS_)
#define _DDS_SAMPLEINFO__SARG_TRAITS_
  
  template<>
  class SArg_Traits<DDS::SampleInfo>
    : public
        Fixed_Size_SArg_Traits_T<
            DDS::SampleInfo,
            TAO::Any_Insert_Policy_Noop <DDS::SampleInfo>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:590

#if !defined (_DDS_SAMPLEINFOSEQ__SARG_TRAITS_)
#define _DDS_SAMPLEINFOSEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<DDS::SampleInfoSeq>
    : public
        Var_Size_SArg_Traits_T<
            DDS::SampleInfoSeq,
            DDS::SampleInfoSeq_var,
            DDS::SampleInfoSeq_out,
            TAO::Any_Insert_Policy_Noop <DDS::SampleInfoSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:118

#if !defined (_DDS_DOMAINPARTICIPANT__SARG_TRAITS_)
#define _DDS_DOMAINPARTICIPANT__SARG_TRAITS_
  
  template<>
  class  SArg_Traits<DDS::DomainParticipant>
    : public
        Object_SArg_Traits_T<
            DDS::DomainParticipant_ptr,
            DDS::DomainParticipant_var,
            DDS::DomainParticipant_out,
            TAO::Any_Insert_Policy_Noop <DDS::DomainParticipant_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:888

#if !defined (_DDSPERFTEST_PUBCOMPLEXMESSAGE__SARG_TRAITS_)
#define _DDSPERFTEST_PUBCOMPLEXMESSAGE__SARG_TRAITS_
  
  template<>
  class SArg_Traits<DDSPerfTest::PubComplexMessage>
    : public
        Var_Size_SArg_Traits_T<
            DDSPerfTest::PubComplexMessage,
            DDSPerfTest::PubComplexMessage_var,
            DDSPerfTest::PubComplexMessage_out,
            TAO::Any_Insert_Policy_Noop <DDSPerfTest::PubComplexMessage>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:590

#if !defined (_PUBCOMPLEXMESSAGESEQ__SARG_TRAITS_)
#define _PUBCOMPLEXMESSAGESEQ__SARG_TRAITS_
  
  template<>
  class SArg_Traits<PubComplexMessageSeq>
    : public
        Var_Size_SArg_Traits_T<
            PubComplexMessageSeq,
            PubComplexMessageSeq_var,
            PubComplexMessageSeq_out,
            TAO::Any_Insert_Policy_Noop <PubComplexMessageSeq>
          >
  {
  };

#endif /* end #if !defined */
}


// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:888

#if !defined (_DDS_TIME_T__ARG_TRAITS_)
#define _DDS_TIME_T__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDS::Time_t>
    : public
        Fixed_Size_Arg_Traits_T<
            DDS::Time_t,
            TAO::Any_Insert_Policy_Noop <DDS::Time_t>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:888

#if !defined (_DDS_SAMPLEINFO__ARG_TRAITS_)
#define _DDS_SAMPLEINFO__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDS::SampleInfo>
    : public
        Fixed_Size_Arg_Traits_T<
            DDS::SampleInfo,
            TAO::Any_Insert_Policy_Noop <DDS::SampleInfo>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:590

#if !defined (_DDS_SAMPLEINFOSEQ__ARG_TRAITS_)
#define _DDS_SAMPLEINFOSEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDS::SampleInfoSeq>
    : public
        Var_Size_Arg_Traits_T<
            DDS::SampleInfoSeq,
            DDS::SampleInfoSeq_var,
            DDS::SampleInfoSeq_out,
            TAO::Any_Insert_Policy_Noop <DDS::SampleInfoSeq>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:118

#if !defined (_DDS_DOMAINPARTICIPANT__ARG_TRAITS_)
#define _DDS_DOMAINPARTICIPANT__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<DDS::DomainParticipant>
    : public
        Object_Arg_Traits_T<
            DDS::DomainParticipant_ptr,
            DDS::DomainParticipant_var,
            DDS::DomainParticipant_out,
            TAO::Objref_Traits<DDS::DomainParticipant>,
            TAO::Any_Insert_Policy_Noop <DDS::DomainParticipant_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:888

#if !defined (_DDSPERFTEST_PUBCOMPLEXMESSAGE__ARG_TRAITS_)
#define _DDSPERFTEST_PUBCOMPLEXMESSAGE__ARG_TRAITS_
  
  template<>
  class Arg_Traits<DDSPerfTest::PubComplexMessage>
    : public
        Var_Size_Arg_Traits_T<
            DDSPerfTest::PubComplexMessage,
            DDSPerfTest::PubComplexMessage_var,
            DDSPerfTest::PubComplexMessage_out,
            TAO::Any_Insert_Policy_Noop <DDSPerfTest::PubComplexMessage>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:590

#if !defined (_PUBCOMPLEXMESSAGESEQ__ARG_TRAITS_)
#define _PUBCOMPLEXMESSAGESEQ__ARG_TRAITS_
  
  template<>
  class Arg_Traits<PubComplexMessageSeq>
    : public
        Var_Size_Arg_Traits_T<
            PubComplexMessageSeq,
            PubComplexMessageSeq_var,
            PubComplexMessageSeq_out,
            TAO::Any_Insert_Policy_Noop <PubComplexMessageSeq>
          >
  {
  };

#endif /* end #if !defined */
}


// TAO_IDL - Generated from
// be/be_interface.cpp:1513

class TAO_PubComplexMessageTypeSupport_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /home/mxiong/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PubComplexMessageTypeSupport_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PubComplexMessageTypeSupport_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
     19,  0,  0,  5, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19,  0, 19, 19, 19, 19, 19, 19,
     19, 19, 19,  0, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19,
#else
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0, 19,  0, 19,  0,
      0,  5, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19,  0, 19,  0, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PubComplexMessageTypeSupport_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 17,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 18,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 2,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PubComplexMessageTypeSupport::_is_a_skel, 0},
      {"_component", &POA_PubComplexMessageTypeSupport::_component_skel, 0},
      {"_non_existent", &POA_PubComplexMessageTypeSupport::_non_existent_skel, 0},
      {"_repository_id", &POA_PubComplexMessageTypeSupport::_repository_id_skel, 0},
      {"_interface", &POA_PubComplexMessageTypeSupport::_interface_skel, 0},
      {"create_datawriter", &POA_PubComplexMessageTypeSupport::create_datawriter_skel, 0},
      {"create_datareader", &POA_PubComplexMessageTypeSupport::create_datareader_skel, 0},
      {"register_type", &POA_PubComplexMessageTypeSupport::register_type_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,   6, -10,  -2,   7, 
        8,   9,  -1, -24,  12, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_PubComplexMessageTypeSupport_Perfect_Hash_OpTable tao_PubComplexMessageTypeSupport_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:924

TAO::Collocation_Proxy_Broker *
_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_Initializer (size_t)
{
  _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer = 
    _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (_TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_Initializer)
    );



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:103

POA_PubComplexMessageTypeSupport::POA_PubComplexMessageTypeSupport (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PubComplexMessageTypeSupport_optable;
}

POA_PubComplexMessageTypeSupport::POA_PubComplexMessageTypeSupport (const POA_PubComplexMessageTypeSupport& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_DDS, TypeSupport) (rhs),
    ACE_NESTED_CLASS (POA_TAO::DCPS, TypeSupport) (rhs)
{
}

POA_PubComplexMessageTypeSupport::~POA_PubComplexMessageTypeSupport (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class register_type_PubComplexMessageTypeSupport
  : public TAO::Upcall_Command
{
public:
  inline register_type_PubComplexMessageTypeSupport (
    POA_PubComplexMessageTypeSupport * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDS::DomainParticipant>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDS::DomainParticipant, TAO::SArg_Traits< ::DDS::DomainParticipant>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->register_type (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageTypeSupport * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageTypeSupport::register_type_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDS::DomainParticipant>::in_arg_val _tao_participant;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_type_name;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_participant,
      &_tao_type_name
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageTypeSupport * const impl =
    static_cast<POA_PubComplexMessageTypeSupport *> (servant);

  register_type_PubComplexMessageTypeSupport command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:169



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _is_a_PubComplexMessageTypeSupport_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _is_a_PubComplexMessageTypeSupport_Upcall_Command (
    POA_PubComplexMessageTypeSupport * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean, TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    retval =
      this->servant_-> _is_a (
        arg_1
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageTypeSupport * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageTypeSupport::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_PubComplexMessageTypeSupport * const impl =
    static_cast<POA_PubComplexMessageTypeSupport *> (servant);
  
  _is_a_PubComplexMessageTypeSupport_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _non_existent_PubComplexMessageTypeSupport_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _non_existent_PubComplexMessageTypeSupport_Upcall_Command (
    POA_PubComplexMessageTypeSupport * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean, TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _non_existent (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageTypeSupport * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageTypeSupport::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageTypeSupport * const impl =
    static_cast<POA_PubComplexMessageTypeSupport *> (servant);
  
  _non_existent_PubComplexMessageTypeSupport_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _repository_id_PubComplexMessageTypeSupport_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _repository_id_PubComplexMessageTypeSupport_Upcall_Command (
    POA_PubComplexMessageTypeSupport * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _repository_id (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageTypeSupport * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageTypeSupport::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageTypeSupport * const impl =
    static_cast<POA_PubComplexMessageTypeSupport *> (servant);
  
  _repository_id_PubComplexMessageTypeSupport_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:501



void POA_PubComplexMessageTypeSupport::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW ( ::CORBA::INTF_REPOS ( ::CORBA::OMGVMCID | 1,
                                        ::CORBA::COMPLETED_NO));
    }
  
  POA_PubComplexMessageTypeSupport * const impl =
    static_cast<POA_PubComplexMessageTypeSupport *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = 
    impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW ( ::CORBA::MARSHAL ());
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _get_component_PubComplexMessageTypeSupport_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _get_component_PubComplexMessageTypeSupport_Upcall_Command (
    POA_PubComplexMessageTypeSupport * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Object, TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _get_component (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageTypeSupport * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageTypeSupport::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageTypeSupport * const impl =
    static_cast<POA_PubComplexMessageTypeSupport *> (servant);
  
  _get_component_PubComplexMessageTypeSupport_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}

::CORBA::Boolean POA_PubComplexMessageTypeSupport::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:TAO/DCPS/TypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:PubComplexMessageTypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PubComplexMessageTypeSupport::_interface_repository_id (void) const
{
  return "IDL:PubComplexMessageTypeSupport:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:862

void POA_PubComplexMessageTypeSupport::_dispatch (
    TAO_ServerRequest & req,
    void * servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:813

PubComplexMessageTypeSupport *
POA_PubComplexMessageTypeSupport::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  ::CORBA::Boolean _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::PubComplexMessageTypeSupport STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_PubComplexMessageTypeSupport_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1513

class TAO_PubComplexMessageDataWriter_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /home/mxiong/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PubComplexMessageDataWriter_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PubComplexMessageDataWriter_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61,  0,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61,  0,
     61,  0,  8,  0, 61,  5, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61,  0, 61, 25, 61, 61, 61, 61, 61, 61,
     61, 61,  0, 15, 25, 61, 15, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61,
#else
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
     61, 61, 61, 61, 61,  0, 61,  0, 61,  0,
      8,  0, 61,  5, 61, 61, 61, 61, 61, 61,
     61, 61,  0, 61, 25,  0, 15, 25, 61, 15,
     61, 61, 61, 61, 61, 61, 61, 61,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PubComplexMessageDataWriter_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 32,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 35,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 60,
      HASH_VALUE_RANGE = 56,
      DUPLICATES = 0,
      WORDLIST_SIZE = 37
    };

  static const TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PubComplexMessageDataWriter::_is_a_skel, 0},
      {"enable", &POA_PubComplexMessageDataWriter::enable_skel, 0},
      {"set_qos", &POA_PubComplexMessageDataWriter::set_qos_skel, 0},
      {"",0,0},{"",0,0},
      {"_interface", &POA_PubComplexMessageDataWriter::_interface_skel, 0},
      {"",0,0},
      {"get_qos", &POA_PubComplexMessageDataWriter::get_qos_skel, 0},
      {"",0,0},
      {"get_topic", &POA_PubComplexMessageDataWriter::get_topic_skel, 0},
      {"dispose", &POA_PubComplexMessageDataWriter::dispose_skel, 0},
      {"add_associations", &POA_PubComplexMessageDataWriter::add_associations_skel, 0},
      {"assert_liveliness", &POA_PubComplexMessageDataWriter::assert_liveliness_skel, 0},
      {"get_key_value", &POA_PubComplexMessageDataWriter::get_key_value_skel, 0},
      {"",0,0},
      {"write", &POA_PubComplexMessageDataWriter::write_skel, 0},
      {"",0,0},
      {"_repository_id", &POA_PubComplexMessageDataWriter::_repository_id_skel, 0},
      {"get_status_changes", &POA_PubComplexMessageDataWriter::get_status_changes_skel, 0},
      {"",0,0},
      {"_component", &POA_PubComplexMessageDataWriter::_component_skel, 0},
      {"",0,0},
      {"dispose_w_timestamp", &POA_PubComplexMessageDataWriter::dispose_w_timestamp_skel, 0},
      {"_non_existent", &POA_PubComplexMessageDataWriter::_non_existent_skel, 0},
      {"",0,0},
      {"get_matched_subscriptions", &POA_PubComplexMessageDataWriter::get_matched_subscriptions_skel, 0},
      {"get_liveliness_lost_status", &POA_PubComplexMessageDataWriter::get_liveliness_lost_status_skel, 0},
      {"write_w_timestamp", &POA_PubComplexMessageDataWriter::write_w_timestamp_skel, 0},
      {"get_publication_match_status", &POA_PubComplexMessageDataWriter::get_publication_match_status_skel, 0},
      {"get_matched_subscription_data", &POA_PubComplexMessageDataWriter::get_matched_subscription_data_skel, 0},
      {"",0,0},{"",0,0},
      {"set_listener", &POA_PubComplexMessageDataWriter::set_listener_skel, 0},
      {"",0,0},
      {"get_offered_deadline_missed_status", &POA_PubComplexMessageDataWriter::get_offered_deadline_missed_status_skel, 0},
      {"get_offered_incompatible_qos_status", &POA_PubComplexMessageDataWriter::get_offered_incompatible_qos_status_skel, 0},
      {"",0,0},
      {"get_listener", &POA_PubComplexMessageDataWriter::get_listener_skel, 0},
      {"get_publisher", &POA_PubComplexMessageDataWriter::get_publisher_skel, 0},
      {"remove_associations", &POA_PubComplexMessageDataWriter::remove_associations_skel, 0},
      {"register_w_timestamp", &POA_PubComplexMessageDataWriter::register_w_timestamp_skel, 0},
      {"",0,0},
      {"unregister_w_timestamp", &POA_PubComplexMessageDataWriter::unregister_w_timestamp_skel, 0},
      {"update_incompatible_qos", &POA_PubComplexMessageDataWriter::update_incompatible_qos_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"register", &POA_PubComplexMessageDataWriter::_cxx_register_skel, 0},
      {"",0,0},
      {"unregister", &POA_PubComplexMessageDataWriter::unregister_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PubComplexMessageDataWriter_Perfect_Hash_OpTable tao_PubComplexMessageDataWriter_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:924

TAO::Collocation_Proxy_Broker *
_TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
_TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_Initializer (size_t)
{
  _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer = 
    _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
_TAO_PubComplexMessageDataWriter_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (_TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_Initializer)
    );



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:103

POA_PubComplexMessageDataWriter::POA_PubComplexMessageDataWriter (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PubComplexMessageDataWriter_optable;
}

POA_PubComplexMessageDataWriter::POA_PubComplexMessageDataWriter (const POA_PubComplexMessageDataWriter& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_DDS, Entity) (rhs),
    ACE_NESTED_CLASS (POA_DDS, DataWriter) (rhs),
    ACE_NESTED_CLASS (POA_TAO::DCPS, DataWriterRemote) (rhs)
{
}

POA_PubComplexMessageDataWriter::~POA_PubComplexMessageDataWriter (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _cxx_register_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline _cxx_register_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    retval =
      this->servant_->_cxx_register (
        arg_1
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::_cxx_register_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data
    };
  
  static size_t const nargs = 2;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  _cxx_register_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class register_w_timestamp_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline register_w_timestamp_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::DDS::Time_t, TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->register_w_timestamp (
        arg_1
        , arg_2
        , arg_3
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::register_w_timestamp_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_handle,
      &_tao_source_timestamp
    };
  
  static size_t const nargs = 4;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  register_w_timestamp_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class unregister_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline unregister_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->unregister (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::unregister_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_handle
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  unregister_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class unregister_w_timestamp_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline unregister_w_timestamp_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::DDS::Time_t, TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->unregister_w_timestamp (
        arg_1
        , arg_2
        , arg_3
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::unregister_w_timestamp_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_handle,
      &_tao_source_timestamp
    };
  
  static size_t const nargs = 4;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  unregister_w_timestamp_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class write_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline write_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->write (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::write_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_handle
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  write_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class write_w_timestamp_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline write_w_timestamp_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::DDS::Time_t, TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->write_w_timestamp (
        arg_1
        , arg_2
        , arg_3
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::write_w_timestamp_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_handle,
      &_tao_source_timestamp
    };
  
  static size_t const nargs = 4;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  write_w_timestamp_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class dispose_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline dispose_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->dispose (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::dispose_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_instance_handle;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_instance_handle
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  dispose_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class dispose_w_timestamp_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline dispose_w_timestamp_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::DDS::Time_t, TAO::SArg_Traits< ::DDS::Time_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    retval =
      this->servant_->dispose_w_timestamp (
        arg_1
        , arg_2
        , arg_3
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::dispose_w_timestamp_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::in_arg_val _tao_instance_data;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_instance_handle;
  TAO::SArg_Traits< ::DDS::Time_t>::in_arg_val _tao_source_timestamp;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_instance_data,
      &_tao_instance_handle,
      &_tao_source_timestamp
    };
  
  static size_t const nargs = 4;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  dispose_w_timestamp_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class get_key_value_PubComplexMessageDataWriter
  : public TAO::Upcall_Command
{
public:
  inline get_key_value_PubComplexMessageDataWriter (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->get_key_value (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataWriter::get_key_value_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_key_holder;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key_holder,
      &_tao_handle
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);

  get_key_value_PubComplexMessageDataWriter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:169



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _is_a_PubComplexMessageDataWriter_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _is_a_PubComplexMessageDataWriter_Upcall_Command (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean, TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    retval =
      this->servant_-> _is_a (
        arg_1
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataWriter::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);
  
  _is_a_PubComplexMessageDataWriter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _non_existent_PubComplexMessageDataWriter_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _non_existent_PubComplexMessageDataWriter_Upcall_Command (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean, TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _non_existent (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataWriter::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);
  
  _non_existent_PubComplexMessageDataWriter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _repository_id_PubComplexMessageDataWriter_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _repository_id_PubComplexMessageDataWriter_Upcall_Command (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _repository_id (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataWriter::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);
  
  _repository_id_PubComplexMessageDataWriter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:501



void POA_PubComplexMessageDataWriter::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW ( ::CORBA::INTF_REPOS ( ::CORBA::OMGVMCID | 1,
                                        ::CORBA::COMPLETED_NO));
    }
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = 
    impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW ( ::CORBA::MARSHAL ());
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _get_component_PubComplexMessageDataWriter_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _get_component_PubComplexMessageDataWriter_Upcall_Command (
    POA_PubComplexMessageDataWriter * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Object, TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _get_component (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataWriter * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataWriter::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageDataWriter * const impl =
    static_cast<POA_PubComplexMessageDataWriter *> (servant);
  
  _get_component_PubComplexMessageDataWriter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}

::CORBA::Boolean POA_PubComplexMessageDataWriter::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:TAO/DCPS/DataWriterRemote:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:PubComplexMessageDataWriter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PubComplexMessageDataWriter::_interface_repository_id (void) const
{
  return "IDL:PubComplexMessageDataWriter:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:862

void POA_PubComplexMessageDataWriter::_dispatch (
    TAO_ServerRequest & req,
    void * servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:813

PubComplexMessageDataWriter *
POA_PubComplexMessageDataWriter::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  ::CORBA::Boolean _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::PubComplexMessageDataWriter STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_PubComplexMessageDataWriter_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1513

class TAO_PubComplexMessageDataReader_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /home/mxiong/ACE_wrappers/bin/gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PubComplexMessageDataReader_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PubComplexMessageDataReader_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
#if defined (ACE_MVS)
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 10,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 10,
     69, 69,  5,  0, 69, 15, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69,  0,
     69, 69, 69,  5, 69, 69, 69, 69, 69, 69,
     69, 69,  0, 45, 15, 69, 20, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69,
#else
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
     69, 69, 69, 69, 69, 10, 69, 10, 69, 69,
      5,  0, 69, 15, 69, 69, 69, 69, 69, 69,
      0, 69, 69, 69,  5,  0, 45, 15, 69, 20,
     69, 69, 69, 69, 69, 69, 69, 69,
#endif /* ACE_MVS */
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PubComplexMessageDataReader_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 36,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 37,
      MIN_HASH_VALUE = 6,
      MAX_HASH_VALUE = 68,
      HASH_VALUE_RANGE = 63,
      DUPLICATES = 2,
      WORDLIST_SIZE = 42
    };

  static const TAO_operation_db_entry  wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"enable", &POA_PubComplexMessageDataReader::enable_skel, 0},
      {"set_qos", &POA_PubComplexMessageDataReader::set_qos_skel, 0},
      {"read", &POA_PubComplexMessageDataReader::read_skel, 0},
      {"return_loan", &POA_PubComplexMessageDataReader::return_loan_skel, 0},
      {"set_listener", &POA_PubComplexMessageDataReader::set_listener_skel, 0},
      {"read_instance", &POA_PubComplexMessageDataReader::read_instance_skel, 0},
      {"_interface", &POA_PubComplexMessageDataReader::_interface_skel, 0},
      {"read_next_sample", &POA_PubComplexMessageDataReader::read_next_sample_skel, 0},
      {"get_qos", &POA_PubComplexMessageDataReader::get_qos_skel, 0},
      {"read_next_instance", &POA_PubComplexMessageDataReader::read_next_instance_skel, 0},
      {"remove_associations", &POA_PubComplexMessageDataReader::remove_associations_skel, 0},
      {"_is_a", &POA_PubComplexMessageDataReader::_is_a_skel, 0},
      {"add_associations", &POA_PubComplexMessageDataReader::add_associations_skel, 0},
      {"get_key_value", &POA_PubComplexMessageDataReader::get_key_value_skel, 0},
      {"_repository_id", &POA_PubComplexMessageDataReader::_repository_id_skel, 0},
      {"delete_contained_entities", &POA_PubComplexMessageDataReader::delete_contained_entities_skel, 0},
      {"get_listener", &POA_PubComplexMessageDataReader::get_listener_skel, 0},
      {"get_status_changes", &POA_PubComplexMessageDataReader::get_status_changes_skel, 0},
      {"get_subscriber", &POA_PubComplexMessageDataReader::get_subscriber_skel, 0},
      {"get_topicdescription", &POA_PubComplexMessageDataReader::get_topicdescription_skel, 0},
      {"get_sample_lost_status", &POA_PubComplexMessageDataReader::get_sample_lost_status_skel, 0},
      {"update_incompatible_qos", &POA_PubComplexMessageDataReader::update_incompatible_qos_skel, 0},
      {"get_matched_publications", &POA_PubComplexMessageDataReader::get_matched_publications_skel, 0},
      {"get_sample_rejected_status", &POA_PubComplexMessageDataReader::get_sample_rejected_status_skel, 0},
      {"get_liveliness_changed_status", &POA_PubComplexMessageDataReader::get_liveliness_changed_status_skel, 0},
      {"get_subscription_match_status", &POA_PubComplexMessageDataReader::get_subscription_match_status_skel, 0},
      {"take", &POA_PubComplexMessageDataReader::take_skel, 0},
      {"get_requested_deadline_missed_status", &POA_PubComplexMessageDataReader::get_requested_deadline_missed_status_skel, 0},
      {"get_requested_incompatible_qos_status", &POA_PubComplexMessageDataReader::get_requested_incompatible_qos_status_skel, 0},
      {"get_matched_publication_data", &POA_PubComplexMessageDataReader::get_matched_publication_data_skel, 0},
      {"wait_for_historical_data", &POA_PubComplexMessageDataReader::wait_for_historical_data_skel, 0},
      {"take_instance", &POA_PubComplexMessageDataReader::take_instance_skel, 0},
      {"take_next_sample", &POA_PubComplexMessageDataReader::take_next_sample_skel, 0},
      {"take_next_instance", &POA_PubComplexMessageDataReader::take_next_instance_skel, 0},
      {"_component", &POA_PubComplexMessageDataReader::_component_skel, 0},
      {"_non_existent", &POA_PubComplexMessageDataReader::_non_existent_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,   6,   7,  -1,  -1,  -1,  -1,  -1,  -1, 
        8,  -1,   9,  10,  11,  -1,  12,  13,  14,  15,  16,  17,  18,  -1, 
       19,  20,  21,  -1,  22,  23,  24,  25,  -1,  26,  27,  28,  -1,  29, 
      -30,  -2, -70,  -1,  -1,  -1,  -1,  32,  -1,  33,  34,  35,  36,  -1, 
       -1,  -1,  37,  -1,  -1,  38,  -1,  39,  -1,  40,  -1,  -1,  41, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry  *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry  *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_PubComplexMessageDataReader_Perfect_Hash_OpTable tao_PubComplexMessageDataReader_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:924

TAO::Collocation_Proxy_Broker *
_TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
_TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_Initializer (size_t)
{
  _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer = 
    _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
_TAO_PubComplexMessageDataReader_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (_TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_Initializer)
    );



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:103

POA_PubComplexMessageDataReader::POA_PubComplexMessageDataReader (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PubComplexMessageDataReader_optable;
}

POA_PubComplexMessageDataReader::POA_PubComplexMessageDataReader (const POA_PubComplexMessageDataReader& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ACE_NESTED_CLASS (POA_DDS, Entity) (rhs),
    ACE_NESTED_CLASS (POA_DDS, DataReader) (rhs),
    ACE_NESTED_CLASS (POA_TAO::DCPS, DataReaderRemote) (rhs)
{
}

POA_PubComplexMessageDataReader::~POA_PubComplexMessageDataReader (void)
{
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class read_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline read_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long, TAO::SArg_Traits< ::CORBA::Long>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type arg_4 =
      TAO::Portable_Server::get_in_arg< ::DDS::SampleStateMask, TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        4);
      
    TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type arg_5 =
      TAO::Portable_Server::get_in_arg< ::DDS::ViewStateMask, TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        5);
      
    TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type arg_6 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceStateMask, TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        6);
      
    retval =
      this->servant_->read (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::read_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples;
  TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states;
  TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states;
  TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  static size_t const nargs = 7;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  read_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class take_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline take_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long, TAO::SArg_Traits< ::CORBA::Long>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type arg_4 =
      TAO::Portable_Server::get_in_arg< ::DDS::SampleStateMask, TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        4);
      
    TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type arg_5 =
      TAO::Portable_Server::get_in_arg< ::DDS::ViewStateMask, TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        5);
      
    TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type arg_6 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceStateMask, TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        6);
      
    retval =
      this->servant_->take (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::take_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples;
  TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states;
  TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states;
  TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  static size_t const nargs = 7;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  take_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class read_next_sample_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline read_next_sample_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfo>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfo, TAO::SArg_Traits< ::DDS::SampleInfo>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->read_next_sample (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::read_next_sample_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfo>::inout_arg_val _tao_sample_info;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_sample_info
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  read_next_sample_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class take_next_sample_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline take_next_sample_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfo>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfo, TAO::SArg_Traits< ::DDS::SampleInfo>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->take_next_sample (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::take_next_sample_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfo>::inout_arg_val _tao_sample_info;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_sample_info
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  take_next_sample_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class read_instance_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline read_instance_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long, TAO::SArg_Traits< ::CORBA::Long>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_4 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        4);
      
    TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type arg_5 =
      TAO::Portable_Server::get_in_arg< ::DDS::SampleStateMask, TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        5);
      
    TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type arg_6 =
      TAO::Portable_Server::get_in_arg< ::DDS::ViewStateMask, TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        6);
      
    TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type arg_7 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceStateMask, TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        7);
      
    retval =
      this->servant_->read_instance (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        , arg_7
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::read_instance_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle;
  TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states;
  TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states;
  TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  static size_t const nargs = 8;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  read_instance_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class take_instance_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline take_instance_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long, TAO::SArg_Traits< ::CORBA::Long>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_4 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        4);
      
    TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type arg_5 =
      TAO::Portable_Server::get_in_arg< ::DDS::SampleStateMask, TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        5);
      
    TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type arg_6 =
      TAO::Portable_Server::get_in_arg< ::DDS::ViewStateMask, TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        6);
      
    TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type arg_7 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceStateMask, TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        7);
      
    retval =
      this->servant_->take_instance (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        , arg_7
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::take_instance_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle;
  TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states;
  TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states;
  TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  static size_t const nargs = 8;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  take_instance_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class read_next_instance_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline read_next_instance_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long, TAO::SArg_Traits< ::CORBA::Long>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_4 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        4);
      
    TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type arg_5 =
      TAO::Portable_Server::get_in_arg< ::DDS::SampleStateMask, TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        5);
      
    TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type arg_6 =
      TAO::Portable_Server::get_in_arg< ::DDS::ViewStateMask, TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        6);
      
    TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type arg_7 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceStateMask, TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        7);
      
    retval =
      this->servant_->read_next_instance (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        , arg_7
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::read_next_instance_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle;
  TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states;
  TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states;
  TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  static size_t const nargs = 8;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  read_next_instance_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class take_next_instance_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline take_next_instance_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Long, TAO::SArg_Traits< ::CORBA::Long>::in_arg_type> (
        this->operation_details_,
        this->args_,
        3);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_4 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        4);
      
    TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type arg_5 =
      TAO::Portable_Server::get_in_arg< ::DDS::SampleStateMask, TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        5);
      
    TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type arg_6 =
      TAO::Portable_Server::get_in_arg< ::DDS::ViewStateMask, TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        6);
      
    TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type arg_7 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceStateMask, TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_type> (
        this->operation_details_,
        this->args_,
        7);
      
    retval =
      this->servant_->take_next_instance (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        , arg_7
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::take_next_instance_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_max_samples;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_a_handle;
  TAO::SArg_Traits< ::DDS::SampleStateMask>::in_arg_val _tao_sample_states;
  TAO::SArg_Traits< ::DDS::ViewStateMask>::in_arg_val _tao_view_states;
  TAO::SArg_Traits< ::DDS::InstanceStateMask>::in_arg_val _tao_instance_states;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq,
      &_tao_max_samples,
      &_tao_a_handle,
      &_tao_sample_states,
      &_tao_view_states,
      &_tao_instance_states
    };
  
  static size_t const nargs = 8;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  take_next_instance_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class return_loan_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline return_loan_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::PubComplexMessageSeq, TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type arg_2 =
      TAO::Portable_Server::get_inout_arg< ::DDS::SampleInfoSeq, TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->return_loan (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::return_loan_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::PubComplexMessageSeq>::inout_arg_val _tao_received_data;
  TAO::SArg_Traits< ::DDS::SampleInfoSeq>::inout_arg_val _tao_info_seq;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_received_data,
      &_tao_info_seq
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  return_loan_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}


// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class get_key_value_PubComplexMessageDataReader
  : public TAO::Upcall_Command
{
public:
  inline get_key_value_PubComplexMessageDataReader (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::DDS::ReturnCode_t, TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type arg_1 =
      TAO::Portable_Server::get_inout_arg< ::DDSPerfTest::PubComplexMessage, TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type arg_2 =
      TAO::Portable_Server::get_in_arg< ::DDS::InstanceHandle_t, TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_type> (
        this->operation_details_,
        this->args_,
        2);
      
    retval =
      this->servant_->get_key_value (
        arg_1
        , arg_2
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};


// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:192

void POA_PubComplexMessageDataReader::get_key_value_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::DDS::ReturnCode_t>::ret_val retval;
  TAO::SArg_Traits< ::DDSPerfTest::PubComplexMessage>::inout_arg_val _tao_key_holder;
  TAO::SArg_Traits< ::DDS::InstanceHandle_t>::in_arg_val _tao_handle;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_key_holder,
      &_tao_handle
    };
  
  static size_t const nargs = 3;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);

  get_key_value_PubComplexMessageDataReader command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:169



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _is_a_PubComplexMessageDataReader_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _is_a_PubComplexMessageDataReader_Upcall_Command (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean, TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
      TAO::Portable_Server::get_in_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type> (
        this->operation_details_,
        this->args_,
        1);
      
    retval =
      this->servant_-> _is_a (
        arg_1
        ACE_ENV_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataReader::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);
  
  _is_a_PubComplexMessageDataReader_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _non_existent_PubComplexMessageDataReader_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _non_existent_PubComplexMessageDataReader_Upcall_Command (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean, TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _non_existent (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataReader::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);
  
  _non_existent_PubComplexMessageDataReader_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _repository_id_PubComplexMessageDataReader_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _repository_id_PubComplexMessageDataReader_Upcall_Command (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Char *, TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _repository_id (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataReader::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);
  
  _repository_id_PubComplexMessageDataReader_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:501



void POA_PubComplexMessageDataReader::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW ( ::CORBA::INTF_REPOS ( ::CORBA::OMGVMCID | 1,
                                        ::CORBA::COMPLETED_NO));
    }
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = 
    impl->_get_interface (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK;
  
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (
        _tao_out,
        _tao_retval
      );
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == 0)
    {
      ACE_THROW ( ::CORBA::MARSHAL ());
    }
}



// TAO_IDL - Generated from
// be/be_visitor_operation/upcall_command_ss.cpp:127

class _get_component_PubComplexMessageDataReader_Upcall_Command
  : public TAO::Upcall_Command
{
public:
  inline _get_component_PubComplexMessageDataReader_Upcall_Command (
    POA_PubComplexMessageDataReader * servant,
    TAO_Operation_Details const * operation_details,
    TAO::Argument * const args[])
    : servant_ (servant)
    , operation_details_ (operation_details)
    , args_ (args)
  {
  }
  
  virtual void execute (ACE_ENV_SINGLE_ARG_DECL)
  {
    TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
      TAO::Portable_Server::get_ret_arg< ::CORBA::Object, TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type> (
        this->operation_details_,
        this->args_);
    
    retval =
      this->servant_-> _get_component (
        ACE_ENV_SINGLE_ARG_PARAMETER);
    ACE_CHECK;
  }

private:
  POA_PubComplexMessageDataReader * const servant_;
  TAO_Operation_Details const * const operation_details_;
  TAO::Argument * const * const args_;
};
void POA_PubComplexMessageDataReader::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
    ACE_ENV_ARG_DECL
  )
{
  
  
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_PubComplexMessageDataReader * const impl =
    static_cast<POA_PubComplexMessageDataReader *> (servant);
  
  _get_component_PubComplexMessageDataReader_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
  
}

::CORBA::Boolean POA_PubComplexMessageDataReader::_is_a (
    const char* value
    ACE_ENV_ARG_DECL_NOT_USED
  )
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:TAO/DCPS/DataReaderRemote:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:PubComplexMessageDataReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PubComplexMessageDataReader::_interface_repository_id (void) const
{
  return "IDL:PubComplexMessageDataReader:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:862

void POA_PubComplexMessageDataReader::_dispatch (
    TAO_ServerRequest & req,
    void * servant_upcall
    ACE_ENV_ARG_DECL
  )
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this
                                     ACE_ENV_ARG_PARAMETER);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:813

PubComplexMessageDataReader *
POA_PubComplexMessageDataReader::_this (ACE_ENV_SINGLE_ARG_DECL)
{
  TAO_Stub *stub = this->_create_stub (ACE_ENV_SINGLE_ARG_PARAMETER);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  ::CORBA::Boolean _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::PubComplexMessageDataReader STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_PubComplexMessageDataReader_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

