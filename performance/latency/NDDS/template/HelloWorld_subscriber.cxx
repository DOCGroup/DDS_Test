/* HelloWorld_subscriber

   A subscription example

   This file is derived from code automatically generated by the nddsgen 
   command:

   nddsgen -language C++ -example i86Linux2.6gcc3.4.3  HelloWorld.idl

   Example subscription of type HelloWorld automatically generated by 
   'nddsgen' To test them follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription on the same domain used for NDDS with the command
       objs/i86Linux2.6gcc3.4.3/HelloWorld_subscriber 
       		<domain_id> <participant_index> <sample_count>

   (3) Start the publication on the same domain used for NDDS with the command
       objs/i86Linux2.6gcc3.4.3/HelloWorld_publisher 
       		<domain_id> <participant_index> <sample_count>

   (4) To run on the same host (and same domain), use a different 
       participant_index for the subscriber and publisher.

   (5) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
        
       NOTE: To run multiple applications on a host, belonging to the same
       domain, specify a different <participant_index> for each one of them.
       Note that the <participant_index> can be 0 if the participants in a
       domain are on on different hosts.
                          
       On Unix: 
       
       objs/i86Linux2.6gcc3.4.3/HelloWorld_publisher <domain_id> 
       objs/i86Linux2.6gcc3.4.3/HelloWorld_subscriber <domain_id> 
                            
       On Windows:
       
       objs\i86Linux2.6gcc3.4.3\HelloWorld_publisher <domain_id>  
       objs\i86Linux2.6gcc3.4.3\HelloWorld_subscriber <domain_id>   
              
       
modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#include "ndds/ndds_cpp.h"
#include "HelloWorld.h"
#include "HelloWorldSupport.h"

class HelloWorldListener : public DDSDataReaderListener {
  public:
    virtual void on_requested_deadline_missed(
        DDSDataReader* /*reader*/,
        const DDS_RequestedDeadlineMissedStatus& /*status*/) {}
    
    virtual void on_requested_incompatible_qos(
        DDSDataReader* /*reader*/,
        const DDS_RequestedIncompatibleQosStatus& /*status*/) {}
    
    virtual void on_sample_rejected(
        DDSDataReader* /*reader*/,
        const DDS_SampleRejectedStatus& /*status*/) {}

    virtual void on_liveliness_changed(
        DDSDataReader* /*reader*/,
        const DDS_LivelinessChangedStatus& /*status*/) {}

    virtual void on_sample_lost(
        DDSDataReader* /*reader*/,
        const DDS_SampleLostStatus& /*status*/) {}

    virtual void on_subscription_matched(
        DDSDataReader* /*reader*/,
        const DDS_SubscriptionMatchedStatus& /*status*/) {}

    virtual void on_data_available(DDSDataReader* reader);
};

void HelloWorldListener::on_data_available(DDSDataReader* reader)
{
    HelloWorldDataReader *HelloWorld_reader = NULL;
    HelloWorldSeq data_seq;
    DDS_SampleInfoSeq info_seq;
    DDS_ReturnCode_t retcode;
    int i;

    HelloWorld_reader = HelloWorldDataReader::narrow(reader);
    if (HelloWorld_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    retcode = HelloWorld_reader->take(
        data_seq, info_seq, DDS_LENGTH_UNLIMITED,
        DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);

    if (retcode == DDS_RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS_RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }

    for (i = 0; i < data_seq.length(); ++i) {
        if (info_seq[i].valid_data) {
            HelloWorldTypeSupport::print_data(&data_seq[i]);
        }
    }

    retcode = HelloWorld_reader->return_loan(data_seq, info_seq);
    if (retcode != DDS_RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

/* Delete all entities */
static int subscriber_shutdown(
    DDSDomainParticipant *participant,
    DDSSubscriber *subscriber,
    DDSTopic *topic,
    DDSDataReader *reader)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (reader != NULL) {
        retcode = subscriber->delete_datareader(reader);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_datareader error %d\n", retcode);
            status = -1;
        }
    }

    if (topic != NULL) {
        retcode = participant->delete_topic(topic);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_topic error %d\n", retcode);
            status = -1;
        }
    }

    if (subscriber != NULL) {
        retcode = participant->delete_subscriber(subscriber);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_subscriber error %d\n", retcode);
            status = -1;
        }
    }

    if (participant != NULL) {
        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* NDDS provides finalize_instance() method for people who want to release
       memory used by the participant factory singleton.
       Uncomment the following block of code for clean destruction of
       the participant factory singleton. */
/*
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
*/
    return status;
}

extern "C" int subscriber_main(
    int domainId, int participant_index, int sample_count)
{
    DDS_DomainParticipantQos participant_qos;
    DDSDomainParticipant *participant = NULL;
    DDSSubscriber *subscriber = NULL;
    DDSTopic *topic = NULL;
    HelloWorldListener *reader_listener = NULL; 
    DDSDataReader *reader = NULL;
    DDS_ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    struct DDS_Duration_t receive_period = {4,0};
    int status = 0;

    /* Get default participant QoS to customize */
    retcode = DDSTheParticipantFactory->get_default_participant_qos(
        participant_qos);
    if (retcode != DDS_RETCODE_OK) {
        printf("get_default_participant_qos error %d\n", retcode);
        subscriber_shutdown(participant, subscriber, topic, reader);
        return -1;
    }

    /* Customize discovery qos policy in participant QoS */
    participant_qos.discovery.participant_index = participant_index;

    
    /* To create participant with default QoS, use DDS_PARTICIPANT_QOS_DEFAULT
       instead */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, participant_qos, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant, subscriber, topic, reader);
        return -1;
    }

    /* To customize subscriber QoS, use
       participant->get_default_subscriber_qos() instead */
    subscriber = participant->create_subscriber(
        DDS_SUBSCRIBER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant, subscriber, topic, reader);
        return -1;
    }

    /* Register type before creating topic */
    type_name = HelloWorldTypeSupport::get_type_name();
    retcode = HelloWorldTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant, subscriber, topic, reader);
        return -1;
    }

    /* To customize topic QoS, use
       participant->get_default_topic_qos() instead */
    topic = participant->create_topic(
        "Example HelloWorld",
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant, subscriber, topic, reader);
        return -1;
    }

    /* Create data reader listener */
    reader_listener = new HelloWorldListener();
    if (reader_listener ==  NULL) {
        printf("listener instantiation error\n");
        subscriber_shutdown(participant, subscriber, topic, reader);
        return -1;
    }

    /* To customize data reader QoS, use
       subscriber->get_default_datareader_qos() instead */
    reader = subscriber->create_datareader(
        topic, DDS_DATAREADER_QOS_DEFAULT, reader_listener,
        DDS_STATUS_MASK_ALL);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant, subscriber, topic, reader);
        delete reader_listener;
        return -1;
    }

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        printf("HelloWorld subscriber sleeping for %d sec...\n",
               receive_period.sec);

        NDDSUtility::sleep(receive_period);
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant, subscriber, topic, reader);
    delete reader_listener;

    return status;
}

#if !defined(RTI_VXWORKS) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int participant_index = 1;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        participant_index = atoi(argv[2]);
    }
    if (argc >= 4) {
        sample_count = atoi(argv[3]);
    }


    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, participant_index, sample_count);
}
#endif

